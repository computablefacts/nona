// Generated by Snowball 2.0.0 - https://snowballstem.org/

package org.tartarus.snowball.ext;

import org.tartarus.snowball.Among;

/**
 * This class implements the stemming algorithm defined by a snowball script.
 * <p>
 * Generated by Snowball 2.0.0 - https://snowballstem.org/
 * </p>
 */
@SuppressWarnings("unused")
public class turkishStemmer extends org.tartarus.snowball.SnowballStemmer {

  private static final long serialVersionUID = 1L;

  private final static Among a_0[] = {new Among("m", -1, -1), new Among("n", -1, -1),
      new Among("miz", -1, -1), new Among("niz", -1, -1), new Among("muz", -1, -1),
      new Among("nuz", -1, -1), new Among("m\u00FCz", -1, -1), new Among("n\u00FCz", -1, -1),
      new Among("m\u0131z", -1, -1), new Among("n\u0131z", -1, -1)};

  private final static Among a_1[] = {new Among("leri", -1, -1), new Among("lar\u0131", -1, -1)};

  private final static Among a_2[] = {new Among("ni", -1, -1), new Among("nu", -1, -1),
      new Among("n\u00FC", -1, -1), new Among("n\u0131", -1, -1)};

  private final static Among a_3[] = {new Among("in", -1, -1), new Among("un", -1, -1),
      new Among("\u00FCn", -1, -1), new Among("\u0131n", -1, -1)};

  private final static Among a_4[] = {new Among("a", -1, -1), new Among("e", -1, -1)};

  private final static Among a_5[] = {new Among("na", -1, -1), new Among("ne", -1, -1)};

  private final static Among a_6[] = {new Among("da", -1, -1), new Among("ta", -1, -1),
      new Among("de", -1, -1), new Among("te", -1, -1)};

  private final static Among a_7[] = {new Among("nda", -1, -1), new Among("nde", -1, -1)};

  private final static Among a_8[] = {new Among("dan", -1, -1), new Among("tan", -1, -1),
      new Among("den", -1, -1), new Among("ten", -1, -1)};

  private final static Among a_9[] = {new Among("ndan", -1, -1), new Among("nden", -1, -1)};

  private final static Among a_10[] = {new Among("la", -1, -1), new Among("le", -1, -1)};

  private final static Among a_11[] = {new Among("ca", -1, -1), new Among("ce", -1, -1)};

  private final static Among a_12[] = {new Among("im", -1, -1), new Among("um", -1, -1),
      new Among("\u00FCm", -1, -1), new Among("\u0131m", -1, -1)};

  private final static Among a_13[] = {new Among("sin", -1, -1), new Among("sun", -1, -1),
      new Among("s\u00FCn", -1, -1), new Among("s\u0131n", -1, -1)};

  private final static Among a_14[] = {new Among("iz", -1, -1), new Among("uz", -1, -1),
      new Among("\u00FCz", -1, -1), new Among("\u0131z", -1, -1)};

  private final static Among a_15[] = {new Among("siniz", -1, -1), new Among("sunuz", -1, -1),
      new Among("s\u00FCn\u00FCz", -1, -1), new Among("s\u0131n\u0131z", -1, -1)};

  private final static Among a_16[] = {new Among("lar", -1, -1), new Among("ler", -1, -1)};

  private final static Among a_17[] = {new Among("niz", -1, -1), new Among("nuz", -1, -1),
      new Among("n\u00FCz", -1, -1), new Among("n\u0131z", -1, -1)};

  private final static Among a_18[] = {new Among("dir", -1, -1), new Among("tir", -1, -1),
      new Among("dur", -1, -1), new Among("tur", -1, -1), new Among("d\u00FCr", -1, -1),
      new Among("t\u00FCr", -1, -1), new Among("d\u0131r", -1, -1), new Among("t\u0131r", -1, -1)};

  private final static Among a_19[] =
      {new Among("cas\u0131na", -1, -1), new Among("cesine", -1, -1)};

  private final static Among a_20[] = {new Among("di", -1, -1), new Among("ti", -1, -1),
      new Among("dik", -1, -1), new Among("tik", -1, -1), new Among("duk", -1, -1),
      new Among("tuk", -1, -1), new Among("d\u00FCk", -1, -1), new Among("t\u00FCk", -1, -1),
      new Among("d\u0131k", -1, -1), new Among("t\u0131k", -1, -1), new Among("dim", -1, -1),
      new Among("tim", -1, -1), new Among("dum", -1, -1), new Among("tum", -1, -1),
      new Among("d\u00FCm", -1, -1), new Among("t\u00FCm", -1, -1), new Among("d\u0131m", -1, -1),
      new Among("t\u0131m", -1, -1), new Among("din", -1, -1), new Among("tin", -1, -1),
      new Among("dun", -1, -1), new Among("tun", -1, -1), new Among("d\u00FCn", -1, -1),
      new Among("t\u00FCn", -1, -1), new Among("d\u0131n", -1, -1), new Among("t\u0131n", -1, -1),
      new Among("du", -1, -1), new Among("tu", -1, -1), new Among("d\u00FC", -1, -1),
      new Among("t\u00FC", -1, -1), new Among("d\u0131", -1, -1), new Among("t\u0131", -1, -1)};

  private final static Among a_21[] = {new Among("sa", -1, -1), new Among("se", -1, -1),
      new Among("sak", -1, -1), new Among("sek", -1, -1), new Among("sam", -1, -1),
      new Among("sem", -1, -1), new Among("san", -1, -1), new Among("sen", -1, -1)};

  private final static Among a_22[] = {new Among("mi\u015F", -1, -1), new Among("mu\u015F", -1, -1),
      new Among("m\u00FC\u015F", -1, -1), new Among("m\u0131\u015F", -1, -1)};

  private final static Among a_23[] = {new Among("b", -1, 1), new Among("c", -1, 2),
      new Among("d", -1, 3), new Among("\u011F", -1, 4)};

  private static final char g_vowel[] =
      {17, 65, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 8, 0, 0, 0, 0, 0, 0, 1};

  private static final char g_U[] =
      {1, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 1};

  private static final char g_vowel1[] =
      {1, 64, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1};

  private static final char g_vowel2[] =
      {17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 130};

  private static final char g_vowel3[] =
      {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1};

  private static final char g_vowel4[] = {17};

  private static final char g_vowel5[] = {65};

  private static final char g_vowel6[] = {65};

  private boolean B_continue_stemming_noun_suffixes;


  private boolean r_check_vowel_harmony() {
    // (, line 109
    // test, line 110
    int v_1 = limit - cursor;
    // (, line 111
    // (, line 112
    // goto, line 112
    golab0: while (true) {
      int v_2 = limit - cursor;
      lab1: {
        if (!(in_grouping_b(g_vowel, 97, 305))) {
          break lab1;
        }
        cursor = limit - v_2;
        break golab0;
      }
      cursor = limit - v_2;
      if (cursor <= limit_backward) {
        return false;
      }
      cursor--;
    }
    // (, line 113
    // or, line 114
    lab2: {
      int v_3 = limit - cursor;
      lab3: {
        // (, line 114
        // literal, line 114
        if (!(eq_s_b("a"))) {
          break lab3;
        }
        // goto, line 114
        golab4: while (true) {
          int v_4 = limit - cursor;
          lab5: {
            if (!(in_grouping_b(g_vowel1, 97, 305))) {
              break lab5;
            }
            cursor = limit - v_4;
            break golab4;
          }
          cursor = limit - v_4;
          if (cursor <= limit_backward) {
            break lab3;
          }
          cursor--;
        }
        break lab2;
      }
      cursor = limit - v_3;
      lab6: {
        // (, line 115
        // literal, line 115
        if (!(eq_s_b("e"))) {
          break lab6;
        }
        // goto, line 115
        golab7: while (true) {
          int v_5 = limit - cursor;
          lab8: {
            if (!(in_grouping_b(g_vowel2, 101, 252))) {
              break lab8;
            }
            cursor = limit - v_5;
            break golab7;
          }
          cursor = limit - v_5;
          if (cursor <= limit_backward) {
            break lab6;
          }
          cursor--;
        }
        break lab2;
      }
      cursor = limit - v_3;
      lab9: {
        // (, line 116
        // literal, line 116
        if (!(eq_s_b("\u0131"))) {
          break lab9;
        }
        // goto, line 116
        golab10: while (true) {
          int v_6 = limit - cursor;
          lab11: {
            if (!(in_grouping_b(g_vowel3, 97, 305))) {
              break lab11;
            }
            cursor = limit - v_6;
            break golab10;
          }
          cursor = limit - v_6;
          if (cursor <= limit_backward) {
            break lab9;
          }
          cursor--;
        }
        break lab2;
      }
      cursor = limit - v_3;
      lab12: {
        // (, line 117
        // literal, line 117
        if (!(eq_s_b("i"))) {
          break lab12;
        }
        // goto, line 117
        golab13: while (true) {
          int v_7 = limit - cursor;
          lab14: {
            if (!(in_grouping_b(g_vowel4, 101, 105))) {
              break lab14;
            }
            cursor = limit - v_7;
            break golab13;
          }
          cursor = limit - v_7;
          if (cursor <= limit_backward) {
            break lab12;
          }
          cursor--;
        }
        break lab2;
      }
      cursor = limit - v_3;
      lab15: {
        // (, line 118
        // literal, line 118
        if (!(eq_s_b("o"))) {
          break lab15;
        }
        // goto, line 118
        golab16: while (true) {
          int v_8 = limit - cursor;
          lab17: {
            if (!(in_grouping_b(g_vowel5, 111, 117))) {
              break lab17;
            }
            cursor = limit - v_8;
            break golab16;
          }
          cursor = limit - v_8;
          if (cursor <= limit_backward) {
            break lab15;
          }
          cursor--;
        }
        break lab2;
      }
      cursor = limit - v_3;
      lab18: {
        // (, line 119
        // literal, line 119
        if (!(eq_s_b("\u00F6"))) {
          break lab18;
        }
        // goto, line 119
        golab19: while (true) {
          int v_9 = limit - cursor;
          lab20: {
            if (!(in_grouping_b(g_vowel6, 246, 252))) {
              break lab20;
            }
            cursor = limit - v_9;
            break golab19;
          }
          cursor = limit - v_9;
          if (cursor <= limit_backward) {
            break lab18;
          }
          cursor--;
        }
        break lab2;
      }
      cursor = limit - v_3;
      lab21: {
        // (, line 120
        // literal, line 120
        if (!(eq_s_b("u"))) {
          break lab21;
        }
        // goto, line 120
        golab22: while (true) {
          int v_10 = limit - cursor;
          lab23: {
            if (!(in_grouping_b(g_vowel5, 111, 117))) {
              break lab23;
            }
            cursor = limit - v_10;
            break golab22;
          }
          cursor = limit - v_10;
          if (cursor <= limit_backward) {
            break lab21;
          }
          cursor--;
        }
        break lab2;
      }
      cursor = limit - v_3;
      // (, line 121
      // literal, line 121
      if (!(eq_s_b("\u00FC"))) {
        return false;
      }
      // goto, line 121
      golab24: while (true) {
        int v_11 = limit - cursor;
        lab25: {
          if (!(in_grouping_b(g_vowel6, 246, 252))) {
            break lab25;
          }
          cursor = limit - v_11;
          break golab24;
        }
        cursor = limit - v_11;
        if (cursor <= limit_backward) {
          return false;
        }
        cursor--;
      }
    }
    cursor = limit - v_1;
    return true;
  }

  private boolean r_mark_suffix_with_optional_n_consonant() {
    // (, line 130
    // or, line 132
    lab0: {
      int v_1 = limit - cursor;
      lab1: {
        // (, line 131
        // literal, line 131
        if (!(eq_s_b("n"))) {
          break lab1;
        }
        // (, line 131
        // test, line 131
        int v_2 = limit - cursor;
        if (!(in_grouping_b(g_vowel, 97, 305))) {
          break lab1;
        }
        cursor = limit - v_2;
        break lab0;
      }
      cursor = limit - v_1;
      // (, line 133
      // (, line 133
      // not, line 133
      {
        int v_3 = limit - cursor;
        lab2: {
          // (, line 133
          // test, line 133
          int v_4 = limit - cursor;
          // literal, line 133
          if (!(eq_s_b("n"))) {
            break lab2;
          }
          cursor = limit - v_4;
          return false;
        }
        cursor = limit - v_3;
      }
      // test, line 133
      int v_5 = limit - cursor;
      // (, line 133
      // next, line 133
      if (cursor <= limit_backward) {
        return false;
      }
      cursor--;
      if (!(in_grouping_b(g_vowel, 97, 305))) {
        return false;
      }
      cursor = limit - v_5;
    }
    return true;
  }

  private boolean r_mark_suffix_with_optional_s_consonant() {
    // (, line 141
    // or, line 143
    lab0: {
      int v_1 = limit - cursor;
      lab1: {
        // (, line 142
        // literal, line 142
        if (!(eq_s_b("s"))) {
          break lab1;
        }
        // (, line 142
        // test, line 142
        int v_2 = limit - cursor;
        if (!(in_grouping_b(g_vowel, 97, 305))) {
          break lab1;
        }
        cursor = limit - v_2;
        break lab0;
      }
      cursor = limit - v_1;
      // (, line 144
      // (, line 144
      // not, line 144
      {
        int v_3 = limit - cursor;
        lab2: {
          // (, line 144
          // test, line 144
          int v_4 = limit - cursor;
          // literal, line 144
          if (!(eq_s_b("s"))) {
            break lab2;
          }
          cursor = limit - v_4;
          return false;
        }
        cursor = limit - v_3;
      }
      // test, line 144
      int v_5 = limit - cursor;
      // (, line 144
      // next, line 144
      if (cursor <= limit_backward) {
        return false;
      }
      cursor--;
      if (!(in_grouping_b(g_vowel, 97, 305))) {
        return false;
      }
      cursor = limit - v_5;
    }
    return true;
  }

  private boolean r_mark_suffix_with_optional_y_consonant() {
    // (, line 151
    // or, line 153
    lab0: {
      int v_1 = limit - cursor;
      lab1: {
        // (, line 152
        // literal, line 152
        if (!(eq_s_b("y"))) {
          break lab1;
        }
        // (, line 152
        // test, line 152
        int v_2 = limit - cursor;
        if (!(in_grouping_b(g_vowel, 97, 305))) {
          break lab1;
        }
        cursor = limit - v_2;
        break lab0;
      }
      cursor = limit - v_1;
      // (, line 154
      // (, line 154
      // not, line 154
      {
        int v_3 = limit - cursor;
        lab2: {
          // (, line 154
          // test, line 154
          int v_4 = limit - cursor;
          // literal, line 154
          if (!(eq_s_b("y"))) {
            break lab2;
          }
          cursor = limit - v_4;
          return false;
        }
        cursor = limit - v_3;
      }
      // test, line 154
      int v_5 = limit - cursor;
      // (, line 154
      // next, line 154
      if (cursor <= limit_backward) {
        return false;
      }
      cursor--;
      if (!(in_grouping_b(g_vowel, 97, 305))) {
        return false;
      }
      cursor = limit - v_5;
    }
    return true;
  }

  private boolean r_mark_suffix_with_optional_U_vowel() {
    // (, line 157
    // or, line 159
    lab0: {
      int v_1 = limit - cursor;
      lab1: {
        // (, line 158
        if (!(in_grouping_b(g_U, 105, 305))) {
          break lab1;
        }
        // (, line 158
        // test, line 158
        int v_2 = limit - cursor;
        if (!(out_grouping_b(g_vowel, 97, 305))) {
          break lab1;
        }
        cursor = limit - v_2;
        break lab0;
      }
      cursor = limit - v_1;
      // (, line 160
      // (, line 160
      // not, line 160
      {
        int v_3 = limit - cursor;
        lab2: {
          // (, line 160
          // test, line 160
          int v_4 = limit - cursor;
          if (!(in_grouping_b(g_U, 105, 305))) {
            break lab2;
          }
          cursor = limit - v_4;
          return false;
        }
        cursor = limit - v_3;
      }
      // test, line 160
      int v_5 = limit - cursor;
      // (, line 160
      // next, line 160
      if (cursor <= limit_backward) {
        return false;
      }
      cursor--;
      if (!(out_grouping_b(g_vowel, 97, 305))) {
        return false;
      }
      cursor = limit - v_5;
    }
    return true;
  }

  private boolean r_mark_possessives() {
    // (, line 164
    // among, line 165
    if (find_among_b(a_0) == 0) {
      return false;
    }
    // (, line 167
    // call mark_suffix_with_optional_U_vowel, line 167
    if (!r_mark_suffix_with_optional_U_vowel()) {
      return false;
    }
    return true;
  }

  private boolean r_mark_sU() {
    // (, line 170
    // call check_vowel_harmony, line 171
    if (!r_check_vowel_harmony()) {
      return false;
    }
    if (!(in_grouping_b(g_U, 105, 305))) {
      return false;
    }
    // (, line 173
    // call mark_suffix_with_optional_s_consonant, line 173
    if (!r_mark_suffix_with_optional_s_consonant()) {
      return false;
    }
    return true;
  }

  private boolean r_mark_lArI() {
    // (, line 176
    // among, line 177
    if (find_among_b(a_1) == 0) {
      return false;
    }
    return true;
  }

  private boolean r_mark_yU() {
    // (, line 180
    // call check_vowel_harmony, line 181
    if (!r_check_vowel_harmony()) {
      return false;
    }
    if (!(in_grouping_b(g_U, 105, 305))) {
      return false;
    }
    // (, line 183
    // call mark_suffix_with_optional_y_consonant, line 183
    if (!r_mark_suffix_with_optional_y_consonant()) {
      return false;
    }
    return true;
  }

  private boolean r_mark_nU() {
    // (, line 186
    // call check_vowel_harmony, line 187
    if (!r_check_vowel_harmony()) {
      return false;
    }
    // among, line 188
    if (find_among_b(a_2) == 0) {
      return false;
    }
    return true;
  }

  private boolean r_mark_nUn() {
    // (, line 191
    // call check_vowel_harmony, line 192
    if (!r_check_vowel_harmony()) {
      return false;
    }
    // among, line 193
    if (find_among_b(a_3) == 0) {
      return false;
    }
    // (, line 194
    // call mark_suffix_with_optional_n_consonant, line 194
    if (!r_mark_suffix_with_optional_n_consonant()) {
      return false;
    }
    return true;
  }

  private boolean r_mark_yA() {
    // (, line 197
    // call check_vowel_harmony, line 198
    if (!r_check_vowel_harmony()) {
      return false;
    }
    // among, line 199
    if (find_among_b(a_4) == 0) {
      return false;
    }
    // (, line 200
    // call mark_suffix_with_optional_y_consonant, line 200
    if (!r_mark_suffix_with_optional_y_consonant()) {
      return false;
    }
    return true;
  }

  private boolean r_mark_nA() {
    // (, line 203
    // call check_vowel_harmony, line 204
    if (!r_check_vowel_harmony()) {
      return false;
    }
    // among, line 205
    if (find_among_b(a_5) == 0) {
      return false;
    }
    return true;
  }

  private boolean r_mark_DA() {
    // (, line 208
    // call check_vowel_harmony, line 209
    if (!r_check_vowel_harmony()) {
      return false;
    }
    // among, line 210
    if (find_among_b(a_6) == 0) {
      return false;
    }
    return true;
  }

  private boolean r_mark_ndA() {
    // (, line 213
    // call check_vowel_harmony, line 214
    if (!r_check_vowel_harmony()) {
      return false;
    }
    // among, line 215
    if (find_among_b(a_7) == 0) {
      return false;
    }
    return true;
  }

  private boolean r_mark_DAn() {
    // (, line 218
    // call check_vowel_harmony, line 219
    if (!r_check_vowel_harmony()) {
      return false;
    }
    // among, line 220
    if (find_among_b(a_8) == 0) {
      return false;
    }
    return true;
  }

  private boolean r_mark_ndAn() {
    // (, line 223
    // call check_vowel_harmony, line 224
    if (!r_check_vowel_harmony()) {
      return false;
    }
    // among, line 225
    if (find_among_b(a_9) == 0) {
      return false;
    }
    return true;
  }

  private boolean r_mark_ylA() {
    // (, line 228
    // call check_vowel_harmony, line 229
    if (!r_check_vowel_harmony()) {
      return false;
    }
    // among, line 230
    if (find_among_b(a_10) == 0) {
      return false;
    }
    // (, line 231
    // call mark_suffix_with_optional_y_consonant, line 231
    if (!r_mark_suffix_with_optional_y_consonant()) {
      return false;
    }
    return true;
  }

  private boolean r_mark_ki() {
    // (, line 234
    // literal, line 235
    if (!(eq_s_b("ki"))) {
      return false;
    }
    return true;
  }

  private boolean r_mark_ncA() {
    // (, line 238
    // call check_vowel_harmony, line 239
    if (!r_check_vowel_harmony()) {
      return false;
    }
    // among, line 240
    if (find_among_b(a_11) == 0) {
      return false;
    }
    // (, line 241
    // call mark_suffix_with_optional_n_consonant, line 241
    if (!r_mark_suffix_with_optional_n_consonant()) {
      return false;
    }
    return true;
  }

  private boolean r_mark_yUm() {
    // (, line 244
    // call check_vowel_harmony, line 245
    if (!r_check_vowel_harmony()) {
      return false;
    }
    // among, line 246
    if (find_among_b(a_12) == 0) {
      return false;
    }
    // (, line 247
    // call mark_suffix_with_optional_y_consonant, line 247
    if (!r_mark_suffix_with_optional_y_consonant()) {
      return false;
    }
    return true;
  }

  private boolean r_mark_sUn() {
    // (, line 250
    // call check_vowel_harmony, line 251
    if (!r_check_vowel_harmony()) {
      return false;
    }
    // among, line 252
    if (find_among_b(a_13) == 0) {
      return false;
    }
    return true;
  }

  private boolean r_mark_yUz() {
    // (, line 255
    // call check_vowel_harmony, line 256
    if (!r_check_vowel_harmony()) {
      return false;
    }
    // among, line 257
    if (find_among_b(a_14) == 0) {
      return false;
    }
    // (, line 258
    // call mark_suffix_with_optional_y_consonant, line 258
    if (!r_mark_suffix_with_optional_y_consonant()) {
      return false;
    }
    return true;
  }

  private boolean r_mark_sUnUz() {
    // (, line 261
    // among, line 262
    if (find_among_b(a_15) == 0) {
      return false;
    }
    return true;
  }

  private boolean r_mark_lAr() {
    // (, line 265
    // call check_vowel_harmony, line 266
    if (!r_check_vowel_harmony()) {
      return false;
    }
    // among, line 267
    if (find_among_b(a_16) == 0) {
      return false;
    }
    return true;
  }

  private boolean r_mark_nUz() {
    // (, line 270
    // call check_vowel_harmony, line 271
    if (!r_check_vowel_harmony()) {
      return false;
    }
    // among, line 272
    if (find_among_b(a_17) == 0) {
      return false;
    }
    return true;
  }

  private boolean r_mark_DUr() {
    // (, line 275
    // call check_vowel_harmony, line 276
    if (!r_check_vowel_harmony()) {
      return false;
    }
    // among, line 277
    if (find_among_b(a_18) == 0) {
      return false;
    }
    return true;
  }

  private boolean r_mark_cAsInA() {
    // (, line 280
    // among, line 281
    if (find_among_b(a_19) == 0) {
      return false;
    }
    return true;
  }

  private boolean r_mark_yDU() {
    // (, line 284
    // call check_vowel_harmony, line 285
    if (!r_check_vowel_harmony()) {
      return false;
    }
    // among, line 286
    if (find_among_b(a_20) == 0) {
      return false;
    }
    // (, line 290
    // call mark_suffix_with_optional_y_consonant, line 290
    if (!r_mark_suffix_with_optional_y_consonant()) {
      return false;
    }
    return true;
  }

  private boolean r_mark_ysA() {
    // (, line 294
    // among, line 295
    if (find_among_b(a_21) == 0) {
      return false;
    }
    // (, line 296
    // call mark_suffix_with_optional_y_consonant, line 296
    if (!r_mark_suffix_with_optional_y_consonant()) {
      return false;
    }
    return true;
  }

  private boolean r_mark_ymUs_() {
    // (, line 299
    // call check_vowel_harmony, line 300
    if (!r_check_vowel_harmony()) {
      return false;
    }
    // among, line 301
    if (find_among_b(a_22) == 0) {
      return false;
    }
    // (, line 302
    // call mark_suffix_with_optional_y_consonant, line 302
    if (!r_mark_suffix_with_optional_y_consonant()) {
      return false;
    }
    return true;
  }

  private boolean r_mark_yken() {
    // (, line 305
    // literal, line 306
    if (!(eq_s_b("ken"))) {
      return false;
    }
    // (, line 306
    // call mark_suffix_with_optional_y_consonant, line 306
    if (!r_mark_suffix_with_optional_y_consonant()) {
      return false;
    }
    return true;
  }

  private boolean r_stem_nominal_verb_suffixes() {
    // (, line 309
    // [, line 310
    ket = cursor;
    // set continue_stemming_noun_suffixes, line 311
    B_continue_stemming_noun_suffixes = true;
    // or, line 313
    lab0: {
      int v_1 = limit - cursor;
      lab1: {
        // (, line 312
        // or, line 312
        lab2: {
          int v_2 = limit - cursor;
          lab3: {
            // call mark_ymUs_, line 312
            if (!r_mark_ymUs_()) {
              break lab3;
            }
            break lab2;
          }
          cursor = limit - v_2;
          lab4: {
            // call mark_yDU, line 312
            if (!r_mark_yDU()) {
              break lab4;
            }
            break lab2;
          }
          cursor = limit - v_2;
          lab5: {
            // call mark_ysA, line 312
            if (!r_mark_ysA()) {
              break lab5;
            }
            break lab2;
          }
          cursor = limit - v_2;
          // call mark_yken, line 312
          if (!r_mark_yken()) {
            break lab1;
          }
        }
        break lab0;
      }
      cursor = limit - v_1;
      lab6: {
        // (, line 314
        // call mark_cAsInA, line 314
        if (!r_mark_cAsInA()) {
          break lab6;
        }
        // (, line 314
        // or, line 314
        lab7: {
          int v_3 = limit - cursor;
          lab8: {
            // call mark_sUnUz, line 314
            if (!r_mark_sUnUz()) {
              break lab8;
            }
            break lab7;
          }
          cursor = limit - v_3;
          lab9: {
            // call mark_lAr, line 314
            if (!r_mark_lAr()) {
              break lab9;
            }
            break lab7;
          }
          cursor = limit - v_3;
          lab10: {
            // call mark_yUm, line 314
            if (!r_mark_yUm()) {
              break lab10;
            }
            break lab7;
          }
          cursor = limit - v_3;
          lab11: {
            // call mark_sUn, line 314
            if (!r_mark_sUn()) {
              break lab11;
            }
            break lab7;
          }
          cursor = limit - v_3;
          lab12: {
            // call mark_yUz, line 314
            if (!r_mark_yUz()) {
              break lab12;
            }
            break lab7;
          }
          cursor = limit - v_3;
        }
        // call mark_ymUs_, line 314
        if (!r_mark_ymUs_()) {
          break lab6;
        }
        break lab0;
      }
      cursor = limit - v_1;
      lab13: {
        // (, line 316
        // call mark_lAr, line 317
        if (!r_mark_lAr()) {
          break lab13;
        }
        // ], line 317
        bra = cursor;
        // delete, line 317
        slice_del();
        // try, line 317
        int v_4 = limit - cursor;
        lab14: {
          // (, line 317
          // [, line 317
          ket = cursor;
          // (, line 317
          // or, line 317
          lab15: {
            int v_5 = limit - cursor;
            lab16: {
              // call mark_DUr, line 317
              if (!r_mark_DUr()) {
                break lab16;
              }
              break lab15;
            }
            cursor = limit - v_5;
            lab17: {
              // call mark_yDU, line 317
              if (!r_mark_yDU()) {
                break lab17;
              }
              break lab15;
            }
            cursor = limit - v_5;
            lab18: {
              // call mark_ysA, line 317
              if (!r_mark_ysA()) {
                break lab18;
              }
              break lab15;
            }
            cursor = limit - v_5;
            // call mark_ymUs_, line 317
            if (!r_mark_ymUs_()) {
              cursor = limit - v_4;
              break lab14;
            }
          }
        }
        // unset continue_stemming_noun_suffixes, line 318
        B_continue_stemming_noun_suffixes = false;
        break lab0;
      }
      cursor = limit - v_1;
      lab19: {
        // (, line 321
        // call mark_nUz, line 321
        if (!r_mark_nUz()) {
          break lab19;
        }
        // (, line 321
        // or, line 321
        lab20: {
          int v_6 = limit - cursor;
          lab21: {
            // call mark_yDU, line 321
            if (!r_mark_yDU()) {
              break lab21;
            }
            break lab20;
          }
          cursor = limit - v_6;
          // call mark_ysA, line 321
          if (!r_mark_ysA()) {
            break lab19;
          }
        }
        break lab0;
      }
      cursor = limit - v_1;
      lab22: {
        // (, line 323
        // (, line 323
        // or, line 323
        lab23: {
          int v_7 = limit - cursor;
          lab24: {
            // call mark_sUnUz, line 323
            if (!r_mark_sUnUz()) {
              break lab24;
            }
            break lab23;
          }
          cursor = limit - v_7;
          lab25: {
            // call mark_yUz, line 323
            if (!r_mark_yUz()) {
              break lab25;
            }
            break lab23;
          }
          cursor = limit - v_7;
          lab26: {
            // call mark_sUn, line 323
            if (!r_mark_sUn()) {
              break lab26;
            }
            break lab23;
          }
          cursor = limit - v_7;
          // call mark_yUm, line 323
          if (!r_mark_yUm()) {
            break lab22;
          }
        }
        // ], line 323
        bra = cursor;
        // delete, line 323
        slice_del();
        // try, line 323
        int v_8 = limit - cursor;
        lab27: {
          // (, line 323
          // [, line 323
          ket = cursor;
          // call mark_ymUs_, line 323
          if (!r_mark_ymUs_()) {
            cursor = limit - v_8;
            break lab27;
          }
        }
        break lab0;
      }
      cursor = limit - v_1;
      // (, line 325
      // call mark_DUr, line 325
      if (!r_mark_DUr()) {
        return false;
      }
      // ], line 325
      bra = cursor;
      // delete, line 325
      slice_del();
      // try, line 325
      int v_9 = limit - cursor;
      lab28: {
        // (, line 325
        // [, line 325
        ket = cursor;
        // (, line 325
        // or, line 325
        lab29: {
          int v_10 = limit - cursor;
          lab30: {
            // call mark_sUnUz, line 325
            if (!r_mark_sUnUz()) {
              break lab30;
            }
            break lab29;
          }
          cursor = limit - v_10;
          lab31: {
            // call mark_lAr, line 325
            if (!r_mark_lAr()) {
              break lab31;
            }
            break lab29;
          }
          cursor = limit - v_10;
          lab32: {
            // call mark_yUm, line 325
            if (!r_mark_yUm()) {
              break lab32;
            }
            break lab29;
          }
          cursor = limit - v_10;
          lab33: {
            // call mark_sUn, line 325
            if (!r_mark_sUn()) {
              break lab33;
            }
            break lab29;
          }
          cursor = limit - v_10;
          lab34: {
            // call mark_yUz, line 325
            if (!r_mark_yUz()) {
              break lab34;
            }
            break lab29;
          }
          cursor = limit - v_10;
        }
        // call mark_ymUs_, line 325
        if (!r_mark_ymUs_()) {
          cursor = limit - v_9;
          break lab28;
        }
      }
    }
    // ], line 326
    bra = cursor;
    // delete, line 326
    slice_del();
    return true;
  }

  private boolean r_stem_suffix_chain_before_ki() {
    // (, line 330
    // [, line 331
    ket = cursor;
    // call mark_ki, line 332
    if (!r_mark_ki()) {
      return false;
    }
    // (, line 333
    // or, line 340
    lab0: {
      int v_1 = limit - cursor;
      lab1: {
        // (, line 334
        // call mark_DA, line 334
        if (!r_mark_DA()) {
          break lab1;
        }
        // ], line 334
        bra = cursor;
        // delete, line 334
        slice_del();
        // try, line 334
        int v_2 = limit - cursor;
        lab2: {
          // (, line 334
          // [, line 334
          ket = cursor;
          // or, line 336
          lab3: {
            int v_3 = limit - cursor;
            lab4: {
              // (, line 335
              // call mark_lAr, line 335
              if (!r_mark_lAr()) {
                break lab4;
              }
              // ], line 335
              bra = cursor;
              // delete, line 335
              slice_del();
              // try, line 335
              int v_4 = limit - cursor;
              lab5: {
                // (, line 335
                // call stem_suffix_chain_before_ki, line 335
                if (!r_stem_suffix_chain_before_ki()) {
                  cursor = limit - v_4;
                  break lab5;
                }
              }
              break lab3;
            }
            cursor = limit - v_3;
            // (, line 337
            // call mark_possessives, line 337
            if (!r_mark_possessives()) {
              cursor = limit - v_2;
              break lab2;
            }
            // ], line 337
            bra = cursor;
            // delete, line 337
            slice_del();
            // try, line 337
            int v_5 = limit - cursor;
            lab6: {
              // (, line 337
              // [, line 337
              ket = cursor;
              // call mark_lAr, line 337
              if (!r_mark_lAr()) {
                cursor = limit - v_5;
                break lab6;
              }
              // ], line 337
              bra = cursor;
              // delete, line 337
              slice_del();
              // call stem_suffix_chain_before_ki, line 337
              if (!r_stem_suffix_chain_before_ki()) {
                cursor = limit - v_5;
                break lab6;
              }
            }
          }
        }
        break lab0;
      }
      cursor = limit - v_1;
      lab7: {
        // (, line 341
        // call mark_nUn, line 341
        if (!r_mark_nUn()) {
          break lab7;
        }
        // ], line 341
        bra = cursor;
        // delete, line 341
        slice_del();
        // try, line 341
        int v_6 = limit - cursor;
        lab8: {
          // (, line 341
          // [, line 341
          ket = cursor;
          // or, line 343
          lab9: {
            int v_7 = limit - cursor;
            lab10: {
              // (, line 342
              // call mark_lArI, line 342
              if (!r_mark_lArI()) {
                break lab10;
              }
              // ], line 342
              bra = cursor;
              // delete, line 342
              slice_del();
              break lab9;
            }
            cursor = limit - v_7;
            lab11: {
              // (, line 344
              // [, line 344
              ket = cursor;
              // or, line 344
              lab12: {
                int v_8 = limit - cursor;
                lab13: {
                  // call mark_possessives, line 344
                  if (!r_mark_possessives()) {
                    break lab13;
                  }
                  break lab12;
                }
                cursor = limit - v_8;
                // call mark_sU, line 344
                if (!r_mark_sU()) {
                  break lab11;
                }
              }
              // ], line 344
              bra = cursor;
              // delete, line 344
              slice_del();
              // try, line 344
              int v_9 = limit - cursor;
              lab14: {
                // (, line 344
                // [, line 344
                ket = cursor;
                // call mark_lAr, line 344
                if (!r_mark_lAr()) {
                  cursor = limit - v_9;
                  break lab14;
                }
                // ], line 344
                bra = cursor;
                // delete, line 344
                slice_del();
                // call stem_suffix_chain_before_ki, line 344
                if (!r_stem_suffix_chain_before_ki()) {
                  cursor = limit - v_9;
                  break lab14;
                }
              }
              break lab9;
            }
            cursor = limit - v_7;
            // (, line 346
            // call stem_suffix_chain_before_ki, line 346
            if (!r_stem_suffix_chain_before_ki()) {
              cursor = limit - v_6;
              break lab8;
            }
          }
        }
        break lab0;
      }
      cursor = limit - v_1;
      // (, line 349
      // call mark_ndA, line 349
      if (!r_mark_ndA()) {
        return false;
      }
      // (, line 349
      // or, line 351
      lab15: {
        int v_10 = limit - cursor;
        lab16: {
          // (, line 350
          // call mark_lArI, line 350
          if (!r_mark_lArI()) {
            break lab16;
          }
          // ], line 350
          bra = cursor;
          // delete, line 350
          slice_del();
          break lab15;
        }
        cursor = limit - v_10;
        lab17: {
          // (, line 352
          // (, line 352
          // call mark_sU, line 352
          if (!r_mark_sU()) {
            break lab17;
          }
          // ], line 352
          bra = cursor;
          // delete, line 352
          slice_del();
          // try, line 352
          int v_11 = limit - cursor;
          lab18: {
            // (, line 352
            // [, line 352
            ket = cursor;
            // call mark_lAr, line 352
            if (!r_mark_lAr()) {
              cursor = limit - v_11;
              break lab18;
            }
            // ], line 352
            bra = cursor;
            // delete, line 352
            slice_del();
            // call stem_suffix_chain_before_ki, line 352
            if (!r_stem_suffix_chain_before_ki()) {
              cursor = limit - v_11;
              break lab18;
            }
          }
          break lab15;
        }
        cursor = limit - v_10;
        // (, line 354
        // call stem_suffix_chain_before_ki, line 354
        if (!r_stem_suffix_chain_before_ki()) {
          return false;
        }
      }
    }
    return true;
  }

  private boolean r_stem_noun_suffixes() {
    // (, line 359
    // or, line 361
    lab0: {
      int v_1 = limit - cursor;
      lab1: {
        // (, line 360
        // [, line 360
        ket = cursor;
        // call mark_lAr, line 360
        if (!r_mark_lAr()) {
          break lab1;
        }
        // ], line 360
        bra = cursor;
        // delete, line 360
        slice_del();
        // try, line 360
        int v_2 = limit - cursor;
        lab2: {
          // (, line 360
          // call stem_suffix_chain_before_ki, line 360
          if (!r_stem_suffix_chain_before_ki()) {
            cursor = limit - v_2;
            break lab2;
          }
        }
        break lab0;
      }
      cursor = limit - v_1;
      lab3: {
        // (, line 362
        // [, line 362
        ket = cursor;
        // call mark_ncA, line 362
        if (!r_mark_ncA()) {
          break lab3;
        }
        // ], line 362
        bra = cursor;
        // delete, line 362
        slice_del();
        // try, line 363
        int v_3 = limit - cursor;
        lab4: {
          // (, line 363
          // or, line 365
          lab5: {
            int v_4 = limit - cursor;
            lab6: {
              // (, line 364
              // [, line 364
              ket = cursor;
              // call mark_lArI, line 364
              if (!r_mark_lArI()) {
                break lab6;
              }
              // ], line 364
              bra = cursor;
              // delete, line 364
              slice_del();
              break lab5;
            }
            cursor = limit - v_4;
            lab7: {
              // (, line 366
              // [, line 366
              ket = cursor;
              // or, line 366
              lab8: {
                int v_5 = limit - cursor;
                lab9: {
                  // call mark_possessives, line 366
                  if (!r_mark_possessives()) {
                    break lab9;
                  }
                  break lab8;
                }
                cursor = limit - v_5;
                // call mark_sU, line 366
                if (!r_mark_sU()) {
                  break lab7;
                }
              }
              // ], line 366
              bra = cursor;
              // delete, line 366
              slice_del();
              // try, line 366
              int v_6 = limit - cursor;
              lab10: {
                // (, line 366
                // [, line 366
                ket = cursor;
                // call mark_lAr, line 366
                if (!r_mark_lAr()) {
                  cursor = limit - v_6;
                  break lab10;
                }
                // ], line 366
                bra = cursor;
                // delete, line 366
                slice_del();
                // call stem_suffix_chain_before_ki, line 366
                if (!r_stem_suffix_chain_before_ki()) {
                  cursor = limit - v_6;
                  break lab10;
                }
              }
              break lab5;
            }
            cursor = limit - v_4;
            // (, line 368
            // [, line 368
            ket = cursor;
            // call mark_lAr, line 368
            if (!r_mark_lAr()) {
              cursor = limit - v_3;
              break lab4;
            }
            // ], line 368
            bra = cursor;
            // delete, line 368
            slice_del();
            // call stem_suffix_chain_before_ki, line 368
            if (!r_stem_suffix_chain_before_ki()) {
              cursor = limit - v_3;
              break lab4;
            }
          }
        }
        break lab0;
      }
      cursor = limit - v_1;
      lab11: {
        // (, line 372
        // [, line 372
        ket = cursor;
        // (, line 372
        // or, line 372
        lab12: {
          int v_7 = limit - cursor;
          lab13: {
            // call mark_ndA, line 372
            if (!r_mark_ndA()) {
              break lab13;
            }
            break lab12;
          }
          cursor = limit - v_7;
          // call mark_nA, line 372
          if (!r_mark_nA()) {
            break lab11;
          }
        }
        // (, line 373
        // or, line 375
        lab14: {
          int v_8 = limit - cursor;
          lab15: {
            // (, line 374
            // call mark_lArI, line 374
            if (!r_mark_lArI()) {
              break lab15;
            }
            // ], line 374
            bra = cursor;
            // delete, line 374
            slice_del();
            break lab14;
          }
          cursor = limit - v_8;
          lab16: {
            // (, line 376
            // call mark_sU, line 376
            if (!r_mark_sU()) {
              break lab16;
            }
            // ], line 376
            bra = cursor;
            // delete, line 376
            slice_del();
            // try, line 376
            int v_9 = limit - cursor;
            lab17: {
              // (, line 376
              // [, line 376
              ket = cursor;
              // call mark_lAr, line 376
              if (!r_mark_lAr()) {
                cursor = limit - v_9;
                break lab17;
              }
              // ], line 376
              bra = cursor;
              // delete, line 376
              slice_del();
              // call stem_suffix_chain_before_ki, line 376
              if (!r_stem_suffix_chain_before_ki()) {
                cursor = limit - v_9;
                break lab17;
              }
            }
            break lab14;
          }
          cursor = limit - v_8;
          // (, line 378
          // call stem_suffix_chain_before_ki, line 378
          if (!r_stem_suffix_chain_before_ki()) {
            break lab11;
          }
        }
        break lab0;
      }
      cursor = limit - v_1;
      lab18: {
        // (, line 382
        // [, line 382
        ket = cursor;
        // (, line 382
        // or, line 382
        lab19: {
          int v_10 = limit - cursor;
          lab20: {
            // call mark_ndAn, line 382
            if (!r_mark_ndAn()) {
              break lab20;
            }
            break lab19;
          }
          cursor = limit - v_10;
          // call mark_nU, line 382
          if (!r_mark_nU()) {
            break lab18;
          }
        }
        // (, line 382
        // or, line 382
        lab21: {
          int v_11 = limit - cursor;
          lab22: {
            // (, line 382
            // call mark_sU, line 382
            if (!r_mark_sU()) {
              break lab22;
            }
            // ], line 382
            bra = cursor;
            // delete, line 382
            slice_del();
            // try, line 382
            int v_12 = limit - cursor;
            lab23: {
              // (, line 382
              // [, line 382
              ket = cursor;
              // call mark_lAr, line 382
              if (!r_mark_lAr()) {
                cursor = limit - v_12;
                break lab23;
              }
              // ], line 382
              bra = cursor;
              // delete, line 382
              slice_del();
              // call stem_suffix_chain_before_ki, line 382
              if (!r_stem_suffix_chain_before_ki()) {
                cursor = limit - v_12;
                break lab23;
              }
            }
            break lab21;
          }
          cursor = limit - v_11;
          // (, line 382
          // call mark_lArI, line 382
          if (!r_mark_lArI()) {
            break lab18;
          }
        }
        break lab0;
      }
      cursor = limit - v_1;
      lab24: {
        // (, line 384
        // [, line 384
        ket = cursor;
        // call mark_DAn, line 384
        if (!r_mark_DAn()) {
          break lab24;
        }
        // ], line 384
        bra = cursor;
        // delete, line 384
        slice_del();
        // try, line 384
        int v_13 = limit - cursor;
        lab25: {
          // (, line 384
          // [, line 384
          ket = cursor;
          // (, line 385
          // or, line 387
          lab26: {
            int v_14 = limit - cursor;
            lab27: {
              // (, line 386
              // call mark_possessives, line 386
              if (!r_mark_possessives()) {
                break lab27;
              }
              // ], line 386
              bra = cursor;
              // delete, line 386
              slice_del();
              // try, line 386
              int v_15 = limit - cursor;
              lab28: {
                // (, line 386
                // [, line 386
                ket = cursor;
                // call mark_lAr, line 386
                if (!r_mark_lAr()) {
                  cursor = limit - v_15;
                  break lab28;
                }
                // ], line 386
                bra = cursor;
                // delete, line 386
                slice_del();
                // call stem_suffix_chain_before_ki, line 386
                if (!r_stem_suffix_chain_before_ki()) {
                  cursor = limit - v_15;
                  break lab28;
                }
              }
              break lab26;
            }
            cursor = limit - v_14;
            lab29: {
              // (, line 388
              // call mark_lAr, line 388
              if (!r_mark_lAr()) {
                break lab29;
              }
              // ], line 388
              bra = cursor;
              // delete, line 388
              slice_del();
              // try, line 388
              int v_16 = limit - cursor;
              lab30: {
                // (, line 388
                // call stem_suffix_chain_before_ki, line 388
                if (!r_stem_suffix_chain_before_ki()) {
                  cursor = limit - v_16;
                  break lab30;
                }
              }
              break lab26;
            }
            cursor = limit - v_14;
            // (, line 390
            // call stem_suffix_chain_before_ki, line 390
            if (!r_stem_suffix_chain_before_ki()) {
              cursor = limit - v_13;
              break lab25;
            }
          }
        }
        break lab0;
      }
      cursor = limit - v_1;
      lab31: {
        // (, line 394
        // [, line 394
        ket = cursor;
        // or, line 394
        lab32: {
          int v_17 = limit - cursor;
          lab33: {
            // call mark_nUn, line 394
            if (!r_mark_nUn()) {
              break lab33;
            }
            break lab32;
          }
          cursor = limit - v_17;
          // call mark_ylA, line 394
          if (!r_mark_ylA()) {
            break lab31;
          }
        }
        // ], line 394
        bra = cursor;
        // delete, line 394
        slice_del();
        // try, line 395
        int v_18 = limit - cursor;
        lab34: {
          // (, line 395
          // or, line 397
          lab35: {
            int v_19 = limit - cursor;
            lab36: {
              // (, line 396
              // [, line 396
              ket = cursor;
              // call mark_lAr, line 396
              if (!r_mark_lAr()) {
                break lab36;
              }
              // ], line 396
              bra = cursor;
              // delete, line 396
              slice_del();
              // call stem_suffix_chain_before_ki, line 396
              if (!r_stem_suffix_chain_before_ki()) {
                break lab36;
              }
              break lab35;
            }
            cursor = limit - v_19;
            lab37: {
              // (, line 398
              // [, line 398
              ket = cursor;
              // or, line 398
              lab38: {
                int v_20 = limit - cursor;
                lab39: {
                  // call mark_possessives, line 398
                  if (!r_mark_possessives()) {
                    break lab39;
                  }
                  break lab38;
                }
                cursor = limit - v_20;
                // call mark_sU, line 398
                if (!r_mark_sU()) {
                  break lab37;
                }
              }
              // ], line 398
              bra = cursor;
              // delete, line 398
              slice_del();
              // try, line 398
              int v_21 = limit - cursor;
              lab40: {
                // (, line 398
                // [, line 398
                ket = cursor;
                // call mark_lAr, line 398
                if (!r_mark_lAr()) {
                  cursor = limit - v_21;
                  break lab40;
                }
                // ], line 398
                bra = cursor;
                // delete, line 398
                slice_del();
                // call stem_suffix_chain_before_ki, line 398
                if (!r_stem_suffix_chain_before_ki()) {
                  cursor = limit - v_21;
                  break lab40;
                }
              }
              break lab35;
            }
            cursor = limit - v_19;
            // call stem_suffix_chain_before_ki, line 400
            if (!r_stem_suffix_chain_before_ki()) {
              cursor = limit - v_18;
              break lab34;
            }
          }
        }
        break lab0;
      }
      cursor = limit - v_1;
      lab41: {
        // (, line 404
        // [, line 404
        ket = cursor;
        // call mark_lArI, line 404
        if (!r_mark_lArI()) {
          break lab41;
        }
        // ], line 404
        bra = cursor;
        // delete, line 404
        slice_del();
        break lab0;
      }
      cursor = limit - v_1;
      lab42: {
        // (, line 406
        // call stem_suffix_chain_before_ki, line 406
        if (!r_stem_suffix_chain_before_ki()) {
          break lab42;
        }
        break lab0;
      }
      cursor = limit - v_1;
      lab43: {
        // (, line 408
        // [, line 408
        ket = cursor;
        // or, line 408
        lab44: {
          int v_22 = limit - cursor;
          lab45: {
            // call mark_DA, line 408
            if (!r_mark_DA()) {
              break lab45;
            }
            break lab44;
          }
          cursor = limit - v_22;
          lab46: {
            // call mark_yU, line 408
            if (!r_mark_yU()) {
              break lab46;
            }
            break lab44;
          }
          cursor = limit - v_22;
          // call mark_yA, line 408
          if (!r_mark_yA()) {
            break lab43;
          }
        }
        // ], line 408
        bra = cursor;
        // delete, line 408
        slice_del();
        // try, line 408
        int v_23 = limit - cursor;
        lab47: {
          // (, line 408
          // [, line 408
          ket = cursor;
          // (, line 408
          // or, line 408
          lab48: {
            int v_24 = limit - cursor;
            lab49: {
              // (, line 408
              // call mark_possessives, line 408
              if (!r_mark_possessives()) {
                break lab49;
              }
              // ], line 408
              bra = cursor;
              // delete, line 408
              slice_del();
              // try, line 408
              int v_25 = limit - cursor;
              lab50: {
                // (, line 408
                // [, line 408
                ket = cursor;
                // call mark_lAr, line 408
                if (!r_mark_lAr()) {
                  cursor = limit - v_25;
                  break lab50;
                }
              }
              break lab48;
            }
            cursor = limit - v_24;
            // call mark_lAr, line 408
            if (!r_mark_lAr()) {
              cursor = limit - v_23;
              break lab47;
            }
          }
          // ], line 408
          bra = cursor;
          // delete, line 408
          slice_del();
          // [, line 408
          ket = cursor;
          // call stem_suffix_chain_before_ki, line 408
          if (!r_stem_suffix_chain_before_ki()) {
            cursor = limit - v_23;
            break lab47;
          }
        }
        break lab0;
      }
      cursor = limit - v_1;
      // (, line 410
      // [, line 410
      ket = cursor;
      // or, line 410
      lab51: {
        int v_26 = limit - cursor;
        lab52: {
          // call mark_possessives, line 410
          if (!r_mark_possessives()) {
            break lab52;
          }
          break lab51;
        }
        cursor = limit - v_26;
        // call mark_sU, line 410
        if (!r_mark_sU()) {
          return false;
        }
      }
      // ], line 410
      bra = cursor;
      // delete, line 410
      slice_del();
      // try, line 410
      int v_27 = limit - cursor;
      lab53: {
        // (, line 410
        // [, line 410
        ket = cursor;
        // call mark_lAr, line 410
        if (!r_mark_lAr()) {
          cursor = limit - v_27;
          break lab53;
        }
        // ], line 410
        bra = cursor;
        // delete, line 410
        slice_del();
        // call stem_suffix_chain_before_ki, line 410
        if (!r_stem_suffix_chain_before_ki()) {
          cursor = limit - v_27;
          break lab53;
        }
      }
    }
    return true;
  }

  private boolean r_post_process_last_consonants() {
    int among_var;
    // (, line 413
    // [, line 414
    ket = cursor;
    // substring, line 414
    among_var = find_among_b(a_23);
    if (among_var == 0) {
      return false;
    }
    // ], line 414
    bra = cursor;
    switch (among_var) {
      case 1:
        // (, line 415
        // <-, line 415
        slice_from("p");
        break;
      case 2:
        // (, line 416
        // <-, line 416
        slice_from("\u00E7");
        break;
      case 3:
        // (, line 417
        // <-, line 417
        slice_from("t");
        break;
      case 4:
        // (, line 418
        // <-, line 418
        slice_from("k");
        break;
    }
    return true;
  }

  private boolean r_append_U_to_stems_ending_with_d_or_g() {
    // (, line 428
    // test, line 429
    int v_1 = limit - cursor;
    // (, line 429
    // or, line 429
    lab0: {
      int v_2 = limit - cursor;
      lab1: {
        // literal, line 429
        if (!(eq_s_b("d"))) {
          break lab1;
        }
        break lab0;
      }
      cursor = limit - v_2;
      // literal, line 429
      if (!(eq_s_b("g"))) {
        return false;
      }
    }
    cursor = limit - v_1;
    // or, line 431
    lab2: {
      int v_3 = limit - cursor;
      lab3: {
        // (, line 430
        // test, line 430
        int v_4 = limit - cursor;
        // (, line 430
        // (, line 430
        // goto, line 430
        golab4: while (true) {
          int v_5 = limit - cursor;
          lab5: {
            if (!(in_grouping_b(g_vowel, 97, 305))) {
              break lab5;
            }
            cursor = limit - v_5;
            break golab4;
          }
          cursor = limit - v_5;
          if (cursor <= limit_backward) {
            break lab3;
          }
          cursor--;
        }
        // or, line 430
        lab6: {
          int v_6 = limit - cursor;
          lab7: {
            // literal, line 430
            if (!(eq_s_b("a"))) {
              break lab7;
            }
            break lab6;
          }
          cursor = limit - v_6;
          // literal, line 430
          if (!(eq_s_b("\u0131"))) {
            break lab3;
          }
        }
        cursor = limit - v_4;
        // <+, line 430
        {
          int c = cursor;
          insert(cursor, cursor, "\u0131");
          cursor = c;
        }
        break lab2;
      }
      cursor = limit - v_3;
      lab8: {
        // (, line 432
        // test, line 432
        int v_7 = limit - cursor;
        // (, line 432
        // (, line 432
        // goto, line 432
        golab9: while (true) {
          int v_8 = limit - cursor;
          lab10: {
            if (!(in_grouping_b(g_vowel, 97, 305))) {
              break lab10;
            }
            cursor = limit - v_8;
            break golab9;
          }
          cursor = limit - v_8;
          if (cursor <= limit_backward) {
            break lab8;
          }
          cursor--;
        }
        // or, line 432
        lab11: {
          int v_9 = limit - cursor;
          lab12: {
            // literal, line 432
            if (!(eq_s_b("e"))) {
              break lab12;
            }
            break lab11;
          }
          cursor = limit - v_9;
          // literal, line 432
          if (!(eq_s_b("i"))) {
            break lab8;
          }
        }
        cursor = limit - v_7;
        // <+, line 432
        {
          int c = cursor;
          insert(cursor, cursor, "i");
          cursor = c;
        }
        break lab2;
      }
      cursor = limit - v_3;
      lab13: {
        // (, line 434
        // test, line 434
        int v_10 = limit - cursor;
        // (, line 434
        // (, line 434
        // goto, line 434
        golab14: while (true) {
          int v_11 = limit - cursor;
          lab15: {
            if (!(in_grouping_b(g_vowel, 97, 305))) {
              break lab15;
            }
            cursor = limit - v_11;
            break golab14;
          }
          cursor = limit - v_11;
          if (cursor <= limit_backward) {
            break lab13;
          }
          cursor--;
        }
        // or, line 434
        lab16: {
          int v_12 = limit - cursor;
          lab17: {
            // literal, line 434
            if (!(eq_s_b("o"))) {
              break lab17;
            }
            break lab16;
          }
          cursor = limit - v_12;
          // literal, line 434
          if (!(eq_s_b("u"))) {
            break lab13;
          }
        }
        cursor = limit - v_10;
        // <+, line 434
        {
          int c = cursor;
          insert(cursor, cursor, "u");
          cursor = c;
        }
        break lab2;
      }
      cursor = limit - v_3;
      // (, line 436
      // test, line 436
      int v_13 = limit - cursor;
      // (, line 436
      // (, line 436
      // goto, line 436
      golab18: while (true) {
        int v_14 = limit - cursor;
        lab19: {
          if (!(in_grouping_b(g_vowel, 97, 305))) {
            break lab19;
          }
          cursor = limit - v_14;
          break golab18;
        }
        cursor = limit - v_14;
        if (cursor <= limit_backward) {
          return false;
        }
        cursor--;
      }
      // or, line 436
      lab20: {
        int v_15 = limit - cursor;
        lab21: {
          // literal, line 436
          if (!(eq_s_b("\u00F6"))) {
            break lab21;
          }
          break lab20;
        }
        cursor = limit - v_15;
        // literal, line 436
        if (!(eq_s_b("\u00FC"))) {
          return false;
        }
      }
      cursor = limit - v_13;
      // <+, line 436
      {
        int c = cursor;
        insert(cursor, cursor, "\u00FC");
        cursor = c;
      }
    }
    return true;
  }

  private boolean r_is_reserved_word() {
    // (, line 439
    // literal, line 440
    if (!(eq_s_b("ad"))) {
      return false;
    }
    // try, line 440
    int v_1 = limit - cursor;
    lab0: {
      // literal, line 440
      if (!(eq_s_b("soy"))) {
        cursor = limit - v_1;
        break lab0;
      }
    }
    // atlimit, line 440
    if (cursor > limit_backward) {
      return false;
    }
    return true;
  }

  private boolean r_more_than_one_syllable_word() {
    // (, line 446
    // test, line 447
    int v_1 = cursor;
    // (, line 447
    // atleast, line 447
    {
      int v_2 = 2;
      while (true) {
        int v_3 = cursor;
        lab0: {
          // (, line 447
          // gopast, line 447
          golab1: while (true) {
            lab2: {
              if (!(in_grouping(g_vowel, 97, 305))) {
                break lab2;
              }
              break golab1;
            }
            if (cursor >= limit) {
              break lab0;
            }
            cursor++;
          }
          v_2--;
          continue;
        }
        cursor = v_3;
        break;
      }
      if (v_2 > 0) {
        return false;
      }
    }
    cursor = v_1;
    return true;
  }

  private boolean r_postlude() {
    // (, line 450
    // backwards, line 451
    limit_backward = cursor;
    cursor = limit;
    // (, line 451
    // not, line 452
    {
      int v_1 = limit - cursor;
      lab0: {
        // (, line 452
        // call is_reserved_word, line 452
        if (!r_is_reserved_word()) {
          break lab0;
        }
        return false;
      }
      cursor = limit - v_1;
    }
    // do, line 453
    int v_2 = limit - cursor;
    // call append_U_to_stems_ending_with_d_or_g, line 453
    r_append_U_to_stems_ending_with_d_or_g();
    cursor = limit - v_2;
    // do, line 454
    int v_3 = limit - cursor;
    // call post_process_last_consonants, line 454
    r_post_process_last_consonants();
    cursor = limit - v_3;
    cursor = limit_backward;
    return true;
  }

  public boolean stem() {
    // (, line 459
    // (, line 460
    // call more_than_one_syllable_word, line 460
    if (!r_more_than_one_syllable_word()) {
      return false;
    }
    // (, line 461
    // backwards, line 462
    limit_backward = cursor;
    cursor = limit;
    // (, line 462
    // do, line 463
    int v_1 = limit - cursor;
    // call stem_nominal_verb_suffixes, line 463
    r_stem_nominal_verb_suffixes();
    cursor = limit - v_1;
    // Boolean test continue_stemming_noun_suffixes, line 464
    if (!(B_continue_stemming_noun_suffixes)) {
      return false;
    }
    // do, line 465
    int v_2 = limit - cursor;
    // call stem_noun_suffixes, line 465
    r_stem_noun_suffixes();
    cursor = limit - v_2;
    cursor = limit_backward;
    // call postlude, line 468
    if (!r_postlude()) {
      return false;
    }
    return true;
  }

  @Override
  public boolean equals(Object o) {
    return o instanceof turkishStemmer;
  }

  @Override
  public int hashCode() {
    return turkishStemmer.class.getName().hashCode();
  }



}

