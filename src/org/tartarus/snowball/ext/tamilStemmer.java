// Generated by Snowball 2.0.0 - https://snowballstem.org/

package org.tartarus.snowball.ext;

import org.tartarus.snowball.Among;

/**
 * This class implements the stemming algorithm defined by a snowball script.
 * <p>
 * Generated by Snowball 2.0.0 - https://snowballstem.org/
 * </p>
 */
@SuppressWarnings("unused")
public class tamilStemmer extends org.tartarus.snowball.SnowballStemmer {

  private static final long serialVersionUID = 1L;

  private final static Among a_0[] = {new Among("\u0B95", -1, -1), new Among("\u0B99", -1, -1),
      new Among("\u0B9A", -1, -1), new Among("\u0B9E", -1, -1), new Among("\u0BA4", -1, -1),
      new Among("\u0BA8", -1, -1), new Among("\u0BAA", -1, -1), new Among("\u0BAE", -1, -1),
      new Among("\u0BAF", -1, -1), new Among("\u0BB5", -1, -1)};

  private final static Among a_1[] = {new Among("\u0BA8\u0BCD\u0BA4", -1, -1),
      new Among("\u0BA8\u0BCD\u0BA4\u0BCD", -1, -1), new Among("\u0BA8\u0BCD", -1, -1)};

  private final static Among a_2[] =
      {new Among("\u0BBF", -1, -1), new Among("\u0BC0", -1, -1), new Among("\u0BC8", -1, -1)};

  private final static Among a_3[] =
      {new Among("\u0B95", -1, -1), new Among("\u0B9A", -1, -1), new Among("\u0B9F", -1, -1),
          new Among("\u0BA4", -1, -1), new Among("\u0BAA", -1, -1), new Among("\u0BB1", -1, -1)};

  private final static Among a_4[] =
      {new Among("\u0B95", -1, -1), new Among("\u0B9A", -1, -1), new Among("\u0B9F", -1, -1),
          new Among("\u0BA4", -1, -1), new Among("\u0BAA", -1, -1), new Among("\u0BB1", -1, -1)};

  private final static Among a_5[] =
      {new Among("\u0B95", -1, -1), new Among("\u0B9A", -1, -1), new Among("\u0B9F", -1, -1),
          new Among("\u0BA4", -1, -1), new Among("\u0BAA", -1, -1), new Among("\u0BB1", -1, -1)};

  private final static Among a_6[] =
      {new Among("\u0BAF", -1, -1), new Among("\u0BB0", -1, -1), new Among("\u0BB2", -1, -1),
          new Among("\u0BB3", -1, -1), new Among("\u0BB4", -1, -1), new Among("\u0BB5", -1, -1)};

  private final static Among a_7[] =
      {new Among("\u0B99", -1, -1), new Among("\u0B9E", -1, -1), new Among("\u0BA3", -1, -1),
          new Among("\u0BA8", -1, -1), new Among("\u0BA9", -1, -1), new Among("\u0BAE", -1, -1)};

  private final static Among a_8[] =
      {new Among("\u0BAF", -1, -1), new Among("\u0BB5", -1, -1), new Among("\u0BB5\u0BCD", -1, -1)};

  private final static Among a_9[] = {new Among("\u0BBE", -1, -1), new Among("\u0BBF", -1, -1),
      new Among("\u0BC0", -1, -1), new Among("\u0BC1", -1, -1), new Among("\u0BC2", -1, -1),
      new Among("\u0BC6", -1, -1), new Among("\u0BC7", -1, -1), new Among("\u0BC8", -1, -1)};

  private final static Among a_10[] = {new Among("\u0BBE", -1, -1), new Among("\u0BBF", -1, -1),
      new Among("\u0BC0", -1, -1), new Among("\u0BC1", -1, -1), new Among("\u0BC2", -1, -1),
      new Among("\u0BC6", -1, -1), new Among("\u0BC7", -1, -1), new Among("\u0BC8", -1, -1)};

  private final static Among a_11[] =
      {new Among("\u0B85", -1, -1), new Among("\u0B87", -1, -1), new Among("\u0B89", -1, -1)};

  private final static Among a_12[] = {new Among("\u0B95", -1, -1), new Among("\u0B99", -1, -1),
      new Among("\u0B9A", -1, -1), new Among("\u0B9E", -1, -1), new Among("\u0BA4", -1, -1),
      new Among("\u0BA8", -1, -1), new Among("\u0BAA", -1, -1), new Among("\u0BAE", -1, -1),
      new Among("\u0BAF", -1, -1), new Among("\u0BB5", -1, -1)};

  private final static Among a_13[] =
      {new Among("\u0B95", -1, -1), new Among("\u0B9A", -1, -1), new Among("\u0B9F", -1, -1),
          new Among("\u0BA4", -1, -1), new Among("\u0BAA", -1, -1), new Among("\u0BB1", -1, -1)};

  private final static Among a_14[] =
      {new Among("\u0BBE", -1, -1), new Among("\u0BC7", -1, -1), new Among("\u0BCB", -1, -1)};

  private final static Among a_15[] =
      {new Among("\u0BAA\u0BBF", -1, -1), new Among("\u0BB5\u0BBF", -1, -1)};

  private final static Among a_16[] = {new Among("\u0BBE", -1, -1), new Among("\u0BBF", -1, -1),
      new Among("\u0BC0", -1, -1), new Among("\u0BC1", -1, -1), new Among("\u0BC2", -1, -1),
      new Among("\u0BC6", -1, -1), new Among("\u0BC7", -1, -1), new Among("\u0BC8", -1, -1)};

  private final static Among a_17[] = {new Among("\u0BAA\u0B9F\u0BCD\u0B9F", -1, -1),
      new Among("\u0BAA\u0B9F\u0BCD\u0B9F\u0BA3", -1, -1), new Among("\u0BA4\u0BBE\u0BA9", -1, -1),
      new Among("\u0BAA\u0B9F\u0BBF\u0BA4\u0BBE\u0BA9", 2, -1),
      new Among("\u0B95\u0BC1\u0BB0\u0BBF\u0BAF", -1, -1), new Among("\u0BAA\u0B9F\u0BBF", -1, -1),
      new Among("\u0BAA\u0BB1\u0BCD\u0BB1\u0BBF", -1, -1), new Among("\u0BAA\u0B9F\u0BC1", -1, -1),
      new Among("\u0BB5\u0BBF\u0B9F\u0BC1", -1, -1),
      new Among("\u0BAA\u0B9F\u0BCD\u0B9F\u0BC1", -1, -1),
      new Among("\u0BB5\u0BBF\u0B9F\u0BCD\u0B9F\u0BC1", -1, -1),
      new Among("\u0BAA\u0B9F\u0BCD\u0B9F\u0BA4\u0BC1", -1, -1),
      new Among("\u0BC6\u0BB2\u0BCD\u0BB2\u0BBE\u0BAE\u0BCD", -1, -1)};

  private final static Among a_18[] =
      {new Among("\u0B95", -1, -1), new Among("\u0B9A", -1, -1), new Among("\u0B9F", -1, -1),
          new Among("\u0BA4", -1, -1), new Among("\u0BAA", -1, -1), new Among("\u0BB1", -1, -1)};

  private final static Among a_19[] =
      {new Among("\u0B95", -1, -1), new Among("\u0B9A", -1, -1), new Among("\u0B9F", -1, -1),
          new Among("\u0BA4", -1, -1), new Among("\u0BAA", -1, -1), new Among("\u0BB1", -1, -1)};

  private final static Among a_20[] = {new Among("\u0BBE", -1, -1), new Among("\u0BBF", -1, -1),
      new Among("\u0BC0", -1, -1), new Among("\u0BC1", -1, -1), new Among("\u0BC2", -1, -1),
      new Among("\u0BC6", -1, -1), new Among("\u0BC7", -1, -1), new Among("\u0BC8", -1, -1)};

  private final static Among a_21[] = {new Among("\u0BBE", -1, -1), new Among("\u0BBF", -1, -1),
      new Among("\u0BC0", -1, -1), new Among("\u0BC1", -1, -1), new Among("\u0BC2", -1, -1),
      new Among("\u0BC6", -1, -1), new Among("\u0BC7", -1, -1), new Among("\u0BC8", -1, -1)};

  private final static Among a_22[] = {new Among("\u0BAA\u0B9F\u0BC1", -1, -1),
      new Among("\u0B95\u0BCA\u0BA3\u0BCD\u0B9F\u0BBF\u0BB0\u0BCD", -1, -1)};

  private final static Among a_23[] =
      {new Among("\u0B85", -1, -1), new Among("\u0B86", -1, -1), new Among("\u0B87", -1, -1),
          new Among("\u0B88", -1, -1), new Among("\u0B89", -1, -1), new Among("\u0B8A", -1, -1),
          new Among("\u0B8E", -1, -1), new Among("\u0B8F", -1, -1), new Among("\u0B90", -1, -1),
          new Among("\u0B92", -1, -1), new Among("\u0B93", -1, -1), new Among("\u0B94", -1, -1)};

  private final static Among a_24[] = {new Among("\u0BBE", -1, -1), new Among("\u0BBF", -1, -1),
      new Among("\u0BC0", -1, -1), new Among("\u0BC1", -1, -1), new Among("\u0BC2", -1, -1),
      new Among("\u0BC6", -1, -1), new Among("\u0BC7", -1, -1), new Among("\u0BC8", -1, -1)};

  private final static Among a_25[] =
      {new Among("\u0B95\u0BBF\u0BB1", -1, -1), new Among("\u0B95\u0BBF\u0BA9\u0BCD\u0BB1", -1, -1),
          new Among("\u0BBE\u0BA8\u0BBF\u0BA9\u0BCD\u0BB1", -1, -1),
          new Among("\u0B95\u0BBF\u0BB1\u0BCD", -1, -1),
          new Among("\u0B95\u0BBF\u0BA9\u0BCD\u0BB1\u0BCD", -1, -1),
          new Among("\u0BBE\u0BA8\u0BBF\u0BA9\u0BCD\u0BB1\u0BCD", -1, -1)};

  private boolean B_found_vetrumai_urupu;
  private boolean B_found_a_match;


  private boolean r_has_min_length() {
    // (, line 99
    if (!(current.length() > 4)) {
      return false;
    }
    return true;
  }

  private boolean r_fix_va_start() {
    // (, line 103
    // or, line 104
    lab0: {
      int v_1 = cursor;
      lab1: {
        // (, line 104
        // and, line 104
        int v_2 = cursor;
        // try, line 104
        int v_3 = cursor;
        lab2: {
          // literal, line 104
          if (!(eq_s("\u0BB5\u0BCB"))) {
            cursor = v_3;
            break lab2;
          }
        }
        cursor = v_2;
        // [, line 104
        bra = cursor;
        // literal, line 104
        if (!(eq_s("\u0BB5\u0BCB"))) {
          break lab1;
        }
        // ], line 104
        ket = cursor;
        // <-, line 104
        slice_from("\u0B93");
        break lab0;
      }
      cursor = v_1;
      lab3: {
        // (, line 105
        // and, line 105
        int v_4 = cursor;
        // try, line 105
        int v_5 = cursor;
        lab4: {
          // literal, line 105
          if (!(eq_s("\u0BB5\u0BCA"))) {
            cursor = v_5;
            break lab4;
          }
        }
        cursor = v_4;
        // [, line 105
        bra = cursor;
        // literal, line 105
        if (!(eq_s("\u0BB5\u0BCA"))) {
          break lab3;
        }
        // ], line 105
        ket = cursor;
        // <-, line 105
        slice_from("\u0B92");
        break lab0;
      }
      cursor = v_1;
      lab5: {
        // (, line 106
        // and, line 106
        int v_6 = cursor;
        // try, line 106
        int v_7 = cursor;
        lab6: {
          // literal, line 106
          if (!(eq_s("\u0BB5\u0BC1"))) {
            cursor = v_7;
            break lab6;
          }
        }
        cursor = v_6;
        // [, line 106
        bra = cursor;
        // literal, line 106
        if (!(eq_s("\u0BB5\u0BC1"))) {
          break lab5;
        }
        // ], line 106
        ket = cursor;
        // <-, line 106
        slice_from("\u0B89");
        break lab0;
      }
      cursor = v_1;
      // (, line 107
      // and, line 107
      int v_8 = cursor;
      // try, line 107
      int v_9 = cursor;
      lab7: {
        // literal, line 107
        if (!(eq_s("\u0BB5\u0BC2"))) {
          cursor = v_9;
          break lab7;
        }
      }
      cursor = v_8;
      // [, line 107
      bra = cursor;
      // literal, line 107
      if (!(eq_s("\u0BB5\u0BC2"))) {
        return false;
      }
      // ], line 107
      ket = cursor;
      // <-, line 107
      slice_from("\u0B8A");
    }
    return true;
  }

  private boolean r_fix_endings() {
    // (, line 110
    // do, line 111
    int v_1 = cursor;
    lab0: {
      // repeat, line 111
      while (true) {
        int v_2 = cursor;
        lab1: {
          // call fix_ending, line 111
          if (!r_fix_ending()) {
            break lab1;
          }
          continue;
        }
        cursor = v_2;
        break;
      }
    }
    cursor = v_1;
    return true;
  }

  private boolean r_remove_question_prefixes() {
    // (, line 114
    // [, line 115
    bra = cursor;
    // (, line 115
    // literal, line 115
    if (!(eq_s("\u0B8E"))) {
      return false;
    }
    // among, line 115
    if (find_among(a_0) == 0) {
      return false;
    }
    // literal, line 115
    if (!(eq_s("\u0BCD"))) {
      return false;
    }
    // ], line 115
    ket = cursor;
    // delete, line 115
    slice_del();
    // do, line 116
    int v_1 = cursor;
    // call fix_va_start, line 116
    r_fix_va_start();
    cursor = v_1;
    return true;
  }

  private boolean r_fix_ending() {
    // (, line 120
    if (!(current.length() > 3)) {
      return false;
    }
    // backwards, line 122
    limit_backward = cursor;
    cursor = limit;
    // (, line 122
    // or, line 124
    lab0: {
      int v_1 = limit - cursor;
      lab1: {
        // (, line 123
        // [, line 123
        ket = cursor;
        // among, line 123
        if (find_among_b(a_1) == 0) {
          break lab1;
        }
        // ], line 123
        bra = cursor;
        // delete, line 123
        slice_del();
        break lab0;
      }
      cursor = limit - v_1;
      lab2: {
        // (, line 125
        // [, line 125
        ket = cursor;
        // literal, line 125
        if (!(eq_s_b("\u0BAF\u0BCD"))) {
          break lab2;
        }
        // test, line 125
        int v_2 = limit - cursor;
        // among, line 125
        if (find_among_b(a_2) == 0) {
          break lab2;
        }
        cursor = limit - v_2;
        // ], line 125
        bra = cursor;
        // delete, line 125
        slice_del();
        break lab0;
      }
      cursor = limit - v_1;
      lab3: {
        // (, line 127
        // [, line 127
        ket = cursor;
        // or, line 127
        lab4: {
          int v_3 = limit - cursor;
          lab5: {
            // literal, line 127
            if (!(eq_s_b("\u0B9F\u0BCD\u0BAA\u0BCD"))) {
              break lab5;
            }
            break lab4;
          }
          cursor = limit - v_3;
          // literal, line 127
          if (!(eq_s_b("\u0B9F\u0BCD\u0B95\u0BCD"))) {
            break lab3;
          }
        }
        // ], line 127
        bra = cursor;
        // <-, line 127
        slice_from("\u0BB3\u0BCD");
        break lab0;
      }
      cursor = limit - v_1;
      lab6: {
        // (, line 129
        // [, line 129
        ket = cursor;
        // literal, line 129
        if (!(eq_s_b("\u0BA9\u0BCD\u0BB1\u0BCD"))) {
          break lab6;
        }
        // ], line 129
        bra = cursor;
        // <-, line 129
        slice_from("\u0BB2\u0BCD");
        break lab0;
      }
      cursor = limit - v_1;
      lab7: {
        // (, line 132
        // [, line 132
        ket = cursor;
        // literal, line 132
        if (!(eq_s_b("\u0BB1\u0BCD\u0B95\u0BCD"))) {
          break lab7;
        }
        // ], line 132
        bra = cursor;
        // <-, line 132
        slice_from("\u0BB2\u0BCD");
        break lab0;
      }
      cursor = limit - v_1;
      lab8: {
        // (, line 134
        // [, line 134
        ket = cursor;
        // literal, line 134
        if (!(eq_s_b("\u0B9F\u0BCD\u0B9F\u0BCD"))) {
          break lab8;
        }
        // ], line 134
        bra = cursor;
        // <-, line 134
        slice_from("\u0B9F\u0BC1");
        break lab0;
      }
      cursor = limit - v_1;
      lab9: {
        // (, line 136
        // Boolean test found_vetrumai_urupu, line 136
        if (!(B_found_vetrumai_urupu)) {
          break lab9;
        }
        // [, line 136
        ket = cursor;
        // literal, line 136
        if (!(eq_s_b("\u0BA4\u0BCD\u0BA4\u0BCD"))) {
          break lab9;
        }
        // (, line 136
        // test, line 136
        int v_4 = limit - cursor;
        // not, line 136
        {
          int v_5 = limit - cursor;
          lab10: {
            // literal, line 136
            if (!(eq_s_b("\u0BC8"))) {
              break lab10;
            }
            break lab9;
          }
          cursor = limit - v_5;
        }
        cursor = limit - v_4;
        // ], line 136
        bra = cursor;
        // <-, line 136
        slice_from("\u0BAE\u0BCD");
        // ], line 136
        bra = cursor;
        break lab0;
      }
      cursor = limit - v_1;
      lab11: {
        // (, line 138
        // [, line 138
        ket = cursor;
        // or, line 138
        lab12: {
          int v_6 = limit - cursor;
          lab13: {
            // literal, line 138
            if (!(eq_s_b("\u0BC1\u0B95\u0BCD"))) {
              break lab13;
            }
            break lab12;
          }
          cursor = limit - v_6;
          // literal, line 138
          if (!(eq_s_b("\u0BC1\u0B95\u0BCD\u0B95\u0BCD"))) {
            break lab11;
          }
        }
        // ], line 138
        bra = cursor;
        // <-, line 138
        slice_from("\u0BCD");
        break lab0;
      }
      cursor = limit - v_1;
      lab14: {
        // (, line 140
        // [, line 140
        ket = cursor;
        // literal, line 140
        if (!(eq_s_b("\u0BCD"))) {
          break lab14;
        }
        // among, line 140
        if (find_among_b(a_3) == 0) {
          break lab14;
        }
        // literal, line 140
        if (!(eq_s_b("\u0BCD"))) {
          break lab14;
        }
        // among, line 140
        if (find_among_b(a_4) == 0) {
          break lab14;
        }
        // ], line 140
        bra = cursor;
        // delete, line 140
        slice_del();
        break lab0;
      }
      cursor = limit - v_1;
      lab15: {
        // (, line 142
        // [, line 142
        ket = cursor;
        // literal, line 142
        if (!(eq_s_b("\u0BC1\u0B95\u0BCD"))) {
          break lab15;
        }
        // ], line 142
        bra = cursor;
        // <-, line 142
        slice_from("\u0BCD");
        break lab0;
      }
      cursor = limit - v_1;
      lab16: {
        // (, line 144
        // [, line 144
        ket = cursor;
        // literal, line 144
        if (!(eq_s_b("\u0BCD"))) {
          break lab16;
        }
        // among, line 144
        if (find_among_b(a_5) == 0) {
          break lab16;
        }
        // ], line 144
        bra = cursor;
        // delete, line 144
        slice_del();
        break lab0;
      }
      cursor = limit - v_1;
      lab17: {
        // (, line 146
        // [, line 146
        ket = cursor;
        // literal, line 146
        if (!(eq_s_b("\u0BCD"))) {
          break lab17;
        }
        // (, line 146
        // or, line 146
        lab18: {
          int v_7 = limit - cursor;
          lab19: {
            // among, line 146
            if (find_among_b(a_6) == 0) {
              break lab19;
            }
            break lab18;
          }
          cursor = limit - v_7;
          // among, line 146
          if (find_among_b(a_7) == 0) {
            break lab17;
          }
        }
        // literal, line 146
        if (!(eq_s_b("\u0BCD"))) {
          break lab17;
        }
        // ], line 146
        bra = cursor;
        // <-, line 146
        slice_from("\u0BCD");
        break lab0;
      }
      cursor = limit - v_1;
      lab20: {
        // (, line 148
        // [, line 148
        ket = cursor;
        // among, line 148
        if (find_among_b(a_8) == 0) {
          break lab20;
        }
        // ], line 148
        bra = cursor;
        // delete, line 148
        slice_del();
        break lab0;
      }
      cursor = limit - v_1;
      lab21: {
        // (, line 150
        // [, line 150
        ket = cursor;
        // literal, line 150
        if (!(eq_s_b("\u0BA9\u0BC1"))) {
          break lab21;
        }
        // (, line 150
        // test, line 150
        int v_8 = limit - cursor;
        // not, line 150
        {
          int v_9 = limit - cursor;
          lab22: {
            // among, line 150
            if (find_among_b(a_9) == 0) {
              break lab22;
            }
            break lab21;
          }
          cursor = limit - v_9;
        }
        cursor = limit - v_8;
        // ], line 150
        bra = cursor;
        // delete, line 150
        slice_del();
        break lab0;
      }
      cursor = limit - v_1;
      lab23: {
        // (, line 152
        // [, line 152
        ket = cursor;
        // literal, line 152
        if (!(eq_s_b("\u0B99\u0BCD"))) {
          break lab23;
        }
        // (, line 152
        // test, line 152
        int v_10 = limit - cursor;
        // not, line 152
        {
          int v_11 = limit - cursor;
          lab24: {
            // literal, line 152
            if (!(eq_s_b("\u0BC8"))) {
              break lab24;
            }
            break lab23;
          }
          cursor = limit - v_11;
        }
        cursor = limit - v_10;
        // ], line 152
        bra = cursor;
        // <-, line 152
        slice_from("\u0BAE\u0BCD");
        break lab0;
      }
      cursor = limit - v_1;
      lab25: {
        // (, line 154
        // [, line 154
        ket = cursor;
        // literal, line 154
        if (!(eq_s_b("\u0B99\u0BCD"))) {
          break lab25;
        }
        // ], line 154
        bra = cursor;
        // delete, line 154
        slice_del();
        break lab0;
      }
      cursor = limit - v_1;
      // (, line 156
      // [, line 156
      ket = cursor;
      // literal, line 156
      if (!(eq_s_b("\u0BCD"))) {
        return false;
      }
      // (, line 156
      // test, line 156
      int v_12 = limit - cursor;
      // (, line 156
      // or, line 156
      lab26: {
        int v_13 = limit - cursor;
        lab27: {
          // among, line 156
          if (find_among_b(a_10) == 0) {
            break lab27;
          }
          break lab26;
        }
        cursor = limit - v_13;
        // literal, line 156
        if (!(eq_s_b("\u0BCD"))) {
          return false;
        }
      }
      cursor = limit - v_12;
      // ], line 156
      bra = cursor;
      // delete, line 156
      slice_del();
    }
    cursor = limit_backward;
    return true;
  }

  private boolean r_remove_pronoun_prefixes() {
    // (, line 160
    // unset found_a_match, line 161
    B_found_a_match = false;
    // [, line 162
    bra = cursor;
    // among, line 162
    if (find_among(a_11) == 0) {
      return false;
    }
    // among, line 162
    if (find_among(a_12) == 0) {
      return false;
    }
    // literal, line 162
    if (!(eq_s("\u0BCD"))) {
      return false;
    }
    // ], line 162
    ket = cursor;
    // delete, line 162
    slice_del();
    // (, line 163
    // set found_a_match, line 163
    B_found_a_match = true;
    // do, line 164
    int v_1 = cursor;
    // call fix_va_start, line 164
    r_fix_va_start();
    cursor = v_1;
    return true;
  }

  private boolean r_remove_plural_suffix() {
    // (, line 167
    // unset found_a_match, line 168
    B_found_a_match = false;
    // backwards, line 169
    limit_backward = cursor;
    cursor = limit;
    // (, line 169
    // or, line 170
    lab0: {
      int v_1 = limit - cursor;
      lab1: {
        // (, line 170
        // [, line 170
        ket = cursor;
        // literal, line 170
        if (!(eq_s_b("\u0BC1\u0B99\u0BCD\u0B95\u0BB3\u0BCD"))) {
          break lab1;
        }
        // (, line 170
        // test, line 170
        int v_2 = limit - cursor;
        // not, line 170
        {
          int v_3 = limit - cursor;
          lab2: {
            // among, line 170
            if (find_among_b(a_13) == 0) {
              break lab2;
            }
            break lab1;
          }
          cursor = limit - v_3;
        }
        cursor = limit - v_2;
        // ], line 170
        bra = cursor;
        // <-, line 170
        slice_from("\u0BCD");
        break lab0;
      }
      cursor = limit - v_1;
      lab3: {
        // (, line 171
        // [, line 171
        ket = cursor;
        // literal, line 171
        if (!(eq_s_b("\u0BB1\u0BCD\u0B95\u0BB3\u0BCD"))) {
          break lab3;
        }
        // ], line 171
        bra = cursor;
        // <-, line 171
        slice_from("\u0BB2\u0BCD");
        break lab0;
      }
      cursor = limit - v_1;
      lab4: {
        // (, line 172
        // [, line 172
        ket = cursor;
        // literal, line 172
        if (!(eq_s_b("\u0B9F\u0BCD\u0B95\u0BB3\u0BCD"))) {
          break lab4;
        }
        // ], line 172
        bra = cursor;
        // <-, line 172
        slice_from("\u0BB3\u0BCD");
        break lab0;
      }
      cursor = limit - v_1;
      // (, line 173
      // [, line 173
      ket = cursor;
      // literal, line 173
      if (!(eq_s_b("\u0B95\u0BB3\u0BCD"))) {
        return false;
      }
      // ], line 173
      bra = cursor;
      // delete, line 173
      slice_del();
    }
    // (, line 174
    // set found_a_match, line 174
    B_found_a_match = true;
    cursor = limit_backward;
    return true;
  }

  private boolean r_remove_question_suffixes() {
    // (, line 178
    // call has_min_length, line 179
    if (!r_has_min_length()) {
      return false;
    }
    // unset found_a_match, line 180
    B_found_a_match = false;
    // backwards, line 181
    limit_backward = cursor;
    cursor = limit;
    // (, line 181
    // do, line 182
    int v_1 = limit - cursor;
    lab0: {
      // (, line 182
      // [, line 183
      ket = cursor;
      // among, line 183
      if (find_among_b(a_14) == 0) {
        break lab0;
      }
      // ], line 183
      bra = cursor;
      // <-, line 183
      slice_from("\u0BCD");
      // (, line 184
      // set found_a_match, line 184
      B_found_a_match = true;
    }
    cursor = limit - v_1;
    cursor = limit_backward;
    // do, line 187
    // call fix_endings, line 187
    r_fix_endings();
    return true;
  }

  private boolean r_remove_command_suffixes() {
    // (, line 190
    // call has_min_length, line 191
    if (!r_has_min_length()) {
      return false;
    }
    // unset found_a_match, line 192
    B_found_a_match = false;
    // backwards, line 193
    limit_backward = cursor;
    cursor = limit;
    // (, line 193
    // [, line 194
    ket = cursor;
    // among, line 194
    if (find_among_b(a_15) == 0) {
      return false;
    }
    // ], line 194
    bra = cursor;
    // delete, line 194
    slice_del();
    // (, line 195
    // set found_a_match, line 195
    B_found_a_match = true;
    cursor = limit_backward;
    return true;
  }

  private boolean r_remove_um() {
    // (, line 199
    // unset found_a_match, line 200
    B_found_a_match = false;
    // call has_min_length, line 201
    if (!r_has_min_length()) {
      return false;
    }
    // backwards, line 202
    limit_backward = cursor;
    cursor = limit;
    // (, line 202
    // [, line 202
    ket = cursor;
    // literal, line 202
    if (!(eq_s_b("\u0BC1\u0BAE\u0BCD"))) {
      return false;
    }
    // ], line 202
    bra = cursor;
    // <-, line 202
    slice_from("\u0BCD");
    // (, line 203
    // set found_a_match, line 203
    B_found_a_match = true;
    cursor = limit_backward;
    // do, line 205
    int v_1 = cursor;
    // call fix_ending, line 205
    r_fix_ending();
    cursor = v_1;
    return true;
  }

  private boolean r_remove_common_word_endings() {
    // (, line 208
    // unset found_a_match, line 212
    B_found_a_match = false;
    // call has_min_length, line 213
    if (!r_has_min_length()) {
      return false;
    }
    // backwards, line 214
    limit_backward = cursor;
    cursor = limit;
    // (, line 214
    // or, line 231
    lab0: {
      int v_1 = limit - cursor;
      lab1: {
        // test, line 215
        int v_2 = limit - cursor;
        // (, line 215
        // [, line 215
        ket = cursor;
        // or, line 215
        lab2: {
          int v_3 = limit - cursor;
          lab3: {
            // literal, line 215
            if (!(eq_s_b("\u0BC1\u0B9F\u0BA9\u0BCD"))) {
              break lab3;
            }
            break lab2;
          }
          cursor = limit - v_3;
          lab4: {
            // literal, line 216
            if (!(eq_s_b("\u0BBF\u0BB2\u0BCD\u0BB2\u0BC8"))) {
              break lab4;
            }
            break lab2;
          }
          cursor = limit - v_3;
          lab5: {
            // literal, line 217
            if (!(eq_s_b("\u0BBF\u0B9F\u0BAE\u0BCD"))) {
              break lab5;
            }
            break lab2;
          }
          cursor = limit - v_3;
          lab6: {
            // literal, line 218
            if (!(eq_s_b("\u0BBF\u0BA9\u0BCD\u0BB1\u0BBF"))) {
              break lab6;
            }
            break lab2;
          }
          cursor = limit - v_3;
          lab7: {
            // literal, line 219
            if (!(eq_s_b("\u0BBE\u0B95\u0BBF"))) {
              break lab7;
            }
            break lab2;
          }
          cursor = limit - v_3;
          lab8: {
            // literal, line 220
            if (!(eq_s_b("\u0BBE\u0B95\u0BBF\u0BAF"))) {
              break lab8;
            }
            break lab2;
          }
          cursor = limit - v_3;
          lab9: {
            // literal, line 221
            if (!(eq_s_b("\u0BC6\u0BA9\u0BCD\u0BB1\u0BC1"))) {
              break lab9;
            }
            break lab2;
          }
          cursor = limit - v_3;
          lab10: {
            // literal, line 222
            if (!(eq_s_b("\u0BC1\u0BB3\u0BCD\u0BB3"))) {
              break lab10;
            }
            break lab2;
          }
          cursor = limit - v_3;
          lab11: {
            // literal, line 223
            if (!(eq_s_b("\u0BC1\u0B9F\u0BC8\u0BAF"))) {
              break lab11;
            }
            break lab2;
          }
          cursor = limit - v_3;
          lab12: {
            // literal, line 224
            if (!(eq_s_b("\u0BC1\u0B9F\u0BC8"))) {
              break lab12;
            }
            break lab2;
          }
          cursor = limit - v_3;
          lab13: {
            // literal, line 225
            if (!(eq_s_b("\u0BC6\u0BA9\u0BC1\u0BAE\u0BCD"))) {
              break lab13;
            }
            break lab2;
          }
          cursor = limit - v_3;
          lab14: {
            // (, line 226
            // literal, line 226
            if (!(eq_s_b("\u0BB2\u0BCD\u0BB2"))) {
              break lab14;
            }
            // test, line 226
            int v_4 = limit - cursor;
            // (, line 226
            // not, line 226
            {
              int v_5 = limit - cursor;
              lab15: {
                // among, line 226
                if (find_among_b(a_16) == 0) {
                  break lab15;
                }
                break lab14;
              }
              cursor = limit - v_5;
            }
            cursor = limit - v_4;
            break lab2;
          }
          cursor = limit - v_3;
          lab16: {
            // literal, line 227
            if (!(eq_s_b("\u0BC6\u0BA9"))) {
              break lab16;
            }
            break lab2;
          }
          cursor = limit - v_3;
          // literal, line 228
          if (!(eq_s_b("\u0BBE\u0B95\u0BBF"))) {
            break lab1;
          }
        }
        // ], line 228
        bra = cursor;
        // <-, line 228
        slice_from("\u0BCD");
        // (, line 229
        // set found_a_match, line 229
        B_found_a_match = true;
        cursor = limit - v_2;
        break lab0;
      }
      cursor = limit - v_1;
      // test, line 232
      int v_6 = limit - cursor;
      // (, line 232
      // [, line 232
      ket = cursor;
      // among, line 232
      if (find_among_b(a_17) == 0) {
        return false;
      }
      // ], line 245
      bra = cursor;
      // delete, line 245
      slice_del();
      // (, line 246
      // set found_a_match, line 246
      B_found_a_match = true;
      cursor = limit - v_6;
    }
    cursor = limit_backward;
    // do, line 249
    // call fix_endings, line 249
    r_fix_endings();
    return true;
  }

  private boolean r_remove_vetrumai_urupukal() {
    // (, line 252
    // unset found_a_match, line 253
    B_found_a_match = false;
    // unset found_vetrumai_urupu, line 254
    B_found_vetrumai_urupu = false;
    // call has_min_length, line 255
    if (!r_has_min_length()) {
      return false;
    }
    // backwards, line 256
    limit_backward = cursor;
    cursor = limit;
    // (, line 256
    // (, line 257
    // or, line 259
    lab0: {
      int v_1 = limit - cursor;
      lab1: {
        // test, line 258
        int v_2 = limit - cursor;
        // (, line 258
        // [, line 258
        ket = cursor;
        // literal, line 258
        if (!(eq_s_b("\u0BA9\u0BC8"))) {
          break lab1;
        }
        // ], line 258
        bra = cursor;
        // delete, line 258
        slice_del();
        cursor = limit - v_2;
        break lab0;
      }
      cursor = limit - v_1;
      lab2: {
        // test, line 260
        int v_3 = limit - cursor;
        // (, line 260
        // [, line 260
        ket = cursor;
        // or, line 261
        lab3: {
          int v_4 = limit - cursor;
          lab4: {
            // (, line 260
            // or, line 260
            lab5: {
              int v_5 = limit - cursor;
              lab6: {
                // literal, line 260
                if (!(eq_s_b("\u0BBF\u0BA9\u0BC8"))) {
                  break lab6;
                }
                break lab5;
              }
              cursor = limit - v_5;
              // literal, line 261
              if (!(eq_s_b("\u0BC8"))) {
                break lab4;
              }
            }
            // (, line 261
            // test, line 261
            int v_6 = limit - cursor;
            // not, line 261
            {
              int v_7 = limit - cursor;
              lab7: {
                // among, line 261
                if (find_among_b(a_18) == 0) {
                  break lab7;
                }
                break lab4;
              }
              cursor = limit - v_7;
            }
            cursor = limit - v_6;
            break lab3;
          }
          cursor = limit - v_4;
          // (, line 262
          // literal, line 262
          if (!(eq_s_b("\u0BC8"))) {
            break lab2;
          }
          // (, line 262
          // test, line 262
          int v_8 = limit - cursor;
          // (, line 262
          // among, line 262
          if (find_among_b(a_19) == 0) {
            break lab2;
          }
          // literal, line 262
          if (!(eq_s_b("\u0BCD"))) {
            break lab2;
          }
          cursor = limit - v_8;
        }
        // ], line 263
        bra = cursor;
        // <-, line 263
        slice_from("\u0BCD");
        cursor = limit - v_3;
        break lab0;
      }
      cursor = limit - v_1;
      lab8: {
        // test, line 266
        int v_9 = limit - cursor;
        // (, line 266
        // [, line 266
        ket = cursor;
        // or, line 267
        lab9: {
          int v_10 = limit - cursor;
          lab10: {
            // literal, line 267
            if (!(eq_s_b("\u0BCA\u0B9F\u0BC1"))) {
              break lab10;
            }
            break lab9;
          }
          cursor = limit - v_10;
          lab11: {
            // literal, line 268
            if (!(eq_s_b("\u0BCB\u0B9F\u0BC1"))) {
              break lab11;
            }
            break lab9;
          }
          cursor = limit - v_10;
          lab12: {
            // literal, line 269
            if (!(eq_s_b("\u0BBF\u0BB2\u0BCD"))) {
              break lab12;
            }
            break lab9;
          }
          cursor = limit - v_10;
          lab13: {
            // literal, line 270
            if (!(eq_s_b("\u0BBF\u0BB1\u0BCD"))) {
              break lab13;
            }
            break lab9;
          }
          cursor = limit - v_10;
          lab14: {
            // (, line 271
            // literal, line 271
            if (!(eq_s_b("\u0BBF\u0BA9\u0BCD"))) {
              break lab14;
            }
            // (, line 271
            // test, line 271
            int v_11 = limit - cursor;
            // not, line 271
            {
              int v_12 = limit - cursor;
              lab15: {
                // literal, line 271
                if (!(eq_s_b("\u0BAE"))) {
                  break lab15;
                }
                break lab14;
              }
              cursor = limit - v_12;
            }
            cursor = limit - v_11;
            break lab9;
          }
          cursor = limit - v_10;
          lab16: {
            // literal, line 272
            if (!(eq_s_b("\u0BBF\u0BA9\u0BCD\u0BB1\u0BC1"))) {
              break lab16;
            }
            break lab9;
          }
          cursor = limit - v_10;
          lab17: {
            // literal, line 273
            if (!(eq_s_b("\u0BBF\u0BB0\u0BC1\u0BA8\u0BCD\u0BA4\u0BC1"))) {
              break lab17;
            }
            break lab9;
          }
          cursor = limit - v_10;
          lab18: {
            // literal, line 274
            if (!(eq_s_b("\u0BB5\u0BBF\u0B9F"))) {
              break lab18;
            }
            break lab9;
          }
          cursor = limit - v_10;
          lab19: {
            // (, line 275
            if (!(current.length() >= 7)) {
              break lab19;
            }
            // literal, line 275
            if (!(eq_s_b("\u0BBF\u0B9F\u0BAE\u0BCD"))) {
              break lab19;
            }
            break lab9;
          }
          cursor = limit - v_10;
          lab20: {
            // literal, line 276
            if (!(eq_s_b("\u0BBE\u0BB2\u0BCD"))) {
              break lab20;
            }
            break lab9;
          }
          cursor = limit - v_10;
          lab21: {
            // literal, line 277
            if (!(eq_s_b("\u0BC1\u0B9F\u0BC8"))) {
              break lab21;
            }
            break lab9;
          }
          cursor = limit - v_10;
          lab22: {
            // literal, line 278
            if (!(eq_s_b("\u0BBE\u0BAE\u0BB2\u0BCD"))) {
              break lab22;
            }
            break lab9;
          }
          cursor = limit - v_10;
          lab23: {
            // (, line 279
            // literal, line 279
            if (!(eq_s_b("\u0BB2\u0BCD"))) {
              break lab23;
            }
            // (, line 279
            // test, line 279
            int v_13 = limit - cursor;
            // not, line 279
            {
              int v_14 = limit - cursor;
              lab24: {
                // among, line 279
                if (find_among_b(a_20) == 0) {
                  break lab24;
                }
                break lab23;
              }
              cursor = limit - v_14;
            }
            cursor = limit - v_13;
            break lab9;
          }
          cursor = limit - v_10;
          // literal, line 280
          if (!(eq_s_b("\u0BC1\u0BB3\u0BCD"))) {
            break lab8;
          }
        }
        // ], line 281
        bra = cursor;
        // <-, line 281
        slice_from("\u0BCD");
        cursor = limit - v_9;
        break lab0;
      }
      cursor = limit - v_1;
      lab25: {
        // test, line 284
        int v_15 = limit - cursor;
        // (, line 284
        // [, line 284
        ket = cursor;
        // or, line 285
        lab26: {
          int v_16 = limit - cursor;
          lab27: {
            // literal, line 285
            if (!(eq_s_b("\u0B95\u0BA3\u0BCD"))) {
              break lab27;
            }
            break lab26;
          }
          cursor = limit - v_16;
          lab28: {
            // literal, line 286
            if (!(eq_s_b("\u0BAE\u0BC1\u0BA9\u0BCD"))) {
              break lab28;
            }
            break lab26;
          }
          cursor = limit - v_16;
          lab29: {
            // literal, line 287
            if (!(eq_s_b("\u0BAE\u0BC7\u0BB2\u0BCD"))) {
              break lab29;
            }
            break lab26;
          }
          cursor = limit - v_16;
          lab30: {
            // literal, line 288
            if (!(eq_s_b("\u0BAE\u0BC7\u0BB1\u0BCD"))) {
              break lab30;
            }
            break lab26;
          }
          cursor = limit - v_16;
          lab31: {
            // literal, line 289
            if (!(eq_s_b("\u0B95\u0BC0\u0BB4\u0BCD"))) {
              break lab31;
            }
            break lab26;
          }
          cursor = limit - v_16;
          lab32: {
            // literal, line 290
            if (!(eq_s_b("\u0BAA\u0BBF\u0BA9\u0BCD"))) {
              break lab32;
            }
            break lab26;
          }
          cursor = limit - v_16;
          // (, line 291
          // literal, line 291
          if (!(eq_s_b("\u0BA4\u0BC1"))) {
            break lab25;
          }
          // (, line 291
          // test, line 291
          int v_17 = limit - cursor;
          // not, line 291
          {
            int v_18 = limit - cursor;
            lab33: {
              // among, line 291
              if (find_among_b(a_21) == 0) {
                break lab33;
              }
              break lab25;
            }
            cursor = limit - v_18;
          }
          cursor = limit - v_17;
        }
        // ], line 292
        bra = cursor;
        // delete, line 292
        slice_del();
        cursor = limit - v_15;
        break lab0;
      }
      cursor = limit - v_1;
      // test, line 295
      int v_19 = limit - cursor;
      // (, line 295
      // [, line 295
      ket = cursor;
      // literal, line 295
      if (!(eq_s_b("\u0BC0"))) {
        return false;
      }
      // ], line 295
      bra = cursor;
      // <-, line 295
      slice_from("\u0BBF");
      cursor = limit - v_19;
    }
    // (, line 297
    // set found_a_match, line 297
    B_found_a_match = true;
    // (, line 298
    // set found_vetrumai_urupu, line 298
    B_found_vetrumai_urupu = true;
    // do, line 299
    int v_20 = limit - cursor;
    lab34: {
      // (, line 299
      // [, line 299
      ket = cursor;
      // literal, line 299
      if (!(eq_s_b("\u0BBF\u0BA9\u0BCD"))) {
        break lab34;
      }
      // ], line 299
      bra = cursor;
      // <-, line 299
      slice_from("\u0BCD");
    }
    cursor = limit - v_20;
    cursor = limit_backward;
    // do, line 301
    // call fix_endings, line 301
    r_fix_endings();
    return true;
  }

  private boolean r_remove_tense_suffixes() {
    // (, line 304
    // set found_a_match, line 305
    B_found_a_match = true;
    // repeat, line 306
    while (true) {
      int v_1 = cursor;
      lab0: {
        // (, line 306
        // Boolean test found_a_match, line 306
        if (!(B_found_a_match)) {
          break lab0;
        }
        // (, line 306
        // do, line 306
        int v_2 = cursor;
        // call remove_tense_suffix, line 306
        r_remove_tense_suffix();
        cursor = v_2;
        continue;
      }
      cursor = v_1;
      break;
    }
    return true;
  }

  private boolean r_remove_tense_suffix() {
    // (, line 309
    // unset found_a_match, line 310
    B_found_a_match = false;
    // call has_min_length, line 311
    if (!r_has_min_length()) {
      return false;
    }
    // backwards, line 312
    limit_backward = cursor;
    cursor = limit;
    // (, line 312
    // do, line 313
    int v_1 = limit - cursor;
    lab0: {
      // (, line 313
      // or, line 320
      lab1: {
        int v_2 = limit - cursor;
        lab2: {
          // test, line 314
          int v_3 = limit - cursor;
          // (, line 314
          // [, line 314
          ket = cursor;
          // among, line 314
          if (find_among_b(a_22) == 0) {
            break lab2;
          }
          // ], line 317
          bra = cursor;
          // delete, line 317
          slice_del();
          // (, line 318
          // set found_a_match, line 318
          B_found_a_match = true;
          cursor = limit - v_3;
          break lab1;
        }
        cursor = limit - v_2;
        lab3: {
          // test, line 321
          int v_4 = limit - cursor;
          // (, line 321
          // [, line 321
          ket = cursor;
          // or, line 322
          lab4: {
            int v_5 = limit - cursor;
            lab5: {
              // literal, line 322
              if (!(eq_s_b("\u0BAE\u0BBE\u0BB0\u0BCD"))) {
                break lab5;
              }
              break lab4;
            }
            cursor = limit - v_5;
            lab6: {
              // literal, line 323
              if (!(eq_s_b("\u0BAE\u0BBF\u0BA9\u0BCD"))) {
                break lab6;
              }
              break lab4;
            }
            cursor = limit - v_5;
            lab7: {
              // literal, line 324
              if (!(eq_s_b("\u0BA9\u0BA9\u0BCD"))) {
                break lab7;
              }
              break lab4;
            }
            cursor = limit - v_5;
            lab8: {
              // literal, line 325
              if (!(eq_s_b("\u0BA9\u0BBE\u0BA9\u0BCD"))) {
                break lab8;
              }
              break lab4;
            }
            cursor = limit - v_5;
            lab9: {
              // literal, line 326
              if (!(eq_s_b("\u0BA9\u0BBE\u0BB3\u0BCD"))) {
                break lab9;
              }
              break lab4;
            }
            cursor = limit - v_5;
            lab10: {
              // literal, line 327
              if (!(eq_s_b("\u0BA9\u0BBE\u0BB0\u0BCD"))) {
                break lab10;
              }
              break lab4;
            }
            cursor = limit - v_5;
            lab11: {
              // (, line 328
              // literal, line 328
              if (!(eq_s_b("\u0BB5\u0BA9\u0BCD"))) {
                break lab11;
              }
              // test, line 328
              int v_6 = limit - cursor;
              // (, line 328
              // not, line 328
              {
                int v_7 = limit - cursor;
                lab12: {
                  // among, line 328
                  if (find_among_b(a_23) == 0) {
                    break lab12;
                  }
                  break lab11;
                }
                cursor = limit - v_7;
              }
              cursor = limit - v_6;
              break lab4;
            }
            cursor = limit - v_5;
            lab13: {
              // literal, line 329
              if (!(eq_s_b("\u0BA9\u0BB3\u0BCD"))) {
                break lab13;
              }
              break lab4;
            }
            cursor = limit - v_5;
            lab14: {
              // literal, line 330
              if (!(eq_s_b("\u0BB5\u0BB3\u0BCD"))) {
                break lab14;
              }
              break lab4;
            }
            cursor = limit - v_5;
            lab15: {
              // literal, line 331
              if (!(eq_s_b("\u0BA9\u0BB0\u0BCD"))) {
                break lab15;
              }
              break lab4;
            }
            cursor = limit - v_5;
            lab16: {
              // literal, line 332
              if (!(eq_s_b("\u0BB5\u0BB0\u0BCD"))) {
                break lab16;
              }
              break lab4;
            }
            cursor = limit - v_5;
            lab17: {
              // literal, line 333
              if (!(eq_s_b("\u0BA9"))) {
                break lab17;
              }
              break lab4;
            }
            cursor = limit - v_5;
            lab18: {
              // literal, line 333
              if (!(eq_s_b("\u0BAA"))) {
                break lab18;
              }
              break lab4;
            }
            cursor = limit - v_5;
            lab19: {
              // literal, line 333
              if (!(eq_s_b("\u0B95"))) {
                break lab19;
              }
              break lab4;
            }
            cursor = limit - v_5;
            lab20: {
              // literal, line 333
              if (!(eq_s_b("\u0BA4"))) {
                break lab20;
              }
              break lab4;
            }
            cursor = limit - v_5;
            lab21: {
              // literal, line 333
              if (!(eq_s_b("\u0BAF"))) {
                break lab21;
              }
              break lab4;
            }
            cursor = limit - v_5;
            lab22: {
              // literal, line 334
              if (!(eq_s_b("\u0BAA\u0BA9\u0BCD"))) {
                break lab22;
              }
              break lab4;
            }
            cursor = limit - v_5;
            lab23: {
              // literal, line 335
              if (!(eq_s_b("\u0BAA\u0BB3\u0BCD"))) {
                break lab23;
              }
              break lab4;
            }
            cursor = limit - v_5;
            lab24: {
              // literal, line 336
              if (!(eq_s_b("\u0BAA\u0BB0\u0BCD"))) {
                break lab24;
              }
              break lab4;
            }
            cursor = limit - v_5;
            lab25: {
              // (, line 337
              // literal, line 337
              if (!(eq_s_b("\u0BA4\u0BC1"))) {
                break lab25;
              }
              // (, line 337
              // test, line 337
              int v_8 = limit - cursor;
              // not, line 337
              {
                int v_9 = limit - cursor;
                lab26: {
                  // among, line 337
                  if (find_among_b(a_24) == 0) {
                    break lab26;
                  }
                  break lab25;
                }
                cursor = limit - v_9;
              }
              cursor = limit - v_8;
              break lab4;
            }
            cursor = limit - v_5;
            lab27: {
              // literal, line 338
              if (!(eq_s_b("\u0BBF\u0BB1\u0BCD\u0BB1\u0BC1"))) {
                break lab27;
              }
              break lab4;
            }
            cursor = limit - v_5;
            lab28: {
              // literal, line 339
              if (!(eq_s_b("\u0BAA\u0BAE\u0BCD"))) {
                break lab28;
              }
              break lab4;
            }
            cursor = limit - v_5;
            lab29: {
              // literal, line 340
              if (!(eq_s_b("\u0BA9\u0BAE\u0BCD"))) {
                break lab29;
              }
              break lab4;
            }
            cursor = limit - v_5;
            lab30: {
              // literal, line 341
              if (!(eq_s_b("\u0BA4\u0BC1\u0BAE\u0BCD"))) {
                break lab30;
              }
              break lab4;
            }
            cursor = limit - v_5;
            lab31: {
              // literal, line 342
              if (!(eq_s_b("\u0BB1\u0BC1\u0BAE\u0BCD"))) {
                break lab31;
              }
              break lab4;
            }
            cursor = limit - v_5;
            lab32: {
              // literal, line 343
              if (!(eq_s_b("\u0B95\u0BC1\u0BAE\u0BCD"))) {
                break lab32;
              }
              break lab4;
            }
            cursor = limit - v_5;
            lab33: {
              // literal, line 344
              if (!(eq_s_b("\u0BA9\u0BC6\u0BA9\u0BCD"))) {
                break lab33;
              }
              break lab4;
            }
            cursor = limit - v_5;
            lab34: {
              // literal, line 345
              if (!(eq_s_b("\u0BA9\u0BC8"))) {
                break lab34;
              }
              break lab4;
            }
            cursor = limit - v_5;
            // literal, line 346
            if (!(eq_s_b("\u0BB5\u0BC8"))) {
              break lab3;
            }
          }
          // ], line 347
          bra = cursor;
          // delete, line 347
          slice_del();
          // (, line 348
          // set found_a_match, line 348
          B_found_a_match = true;
          cursor = limit - v_4;
          break lab1;
        }
        cursor = limit - v_2;
        lab35: {
          // test, line 351
          int v_10 = limit - cursor;
          // (, line 351
          // [, line 351
          ket = cursor;
          // or, line 352
          lab36: {
            int v_11 = limit - cursor;
            lab37: {
              // (, line 352
              // literal, line 352
              if (!(eq_s_b("\u0BBE\u0BA9\u0BCD"))) {
                break lab37;
              }
              // test, line 352
              int v_12 = limit - cursor;
              // (, line 352
              // not, line 352
              {
                int v_13 = limit - cursor;
                lab38: {
                  // literal, line 352
                  if (!(eq_s_b("\u0B9A"))) {
                    break lab38;
                  }
                  break lab37;
                }
                cursor = limit - v_13;
              }
              cursor = limit - v_12;
              break lab36;
            }
            cursor = limit - v_11;
            lab39: {
              // literal, line 353
              if (!(eq_s_b("\u0BBE\u0BB3\u0BCD"))) {
                break lab39;
              }
              break lab36;
            }
            cursor = limit - v_11;
            lab40: {
              // literal, line 354
              if (!(eq_s_b("\u0BBE\u0BB0\u0BCD"))) {
                break lab40;
              }
              break lab36;
            }
            cursor = limit - v_11;
            lab41: {
              // literal, line 355
              if (!(eq_s_b("\u0BC7\u0BA9\u0BCD"))) {
                break lab41;
              }
              break lab36;
            }
            cursor = limit - v_11;
            lab42: {
              // literal, line 356
              if (!(eq_s_b("\u0BBE"))) {
                break lab42;
              }
              break lab36;
            }
            cursor = limit - v_11;
            lab43: {
              // literal, line 357
              if (!(eq_s_b("\u0BBE\u0BAE\u0BCD"))) {
                break lab43;
              }
              break lab36;
            }
            cursor = limit - v_11;
            lab44: {
              // literal, line 358
              if (!(eq_s_b("\u0BC6\u0BAE\u0BCD"))) {
                break lab44;
              }
              break lab36;
            }
            cursor = limit - v_11;
            lab45: {
              // literal, line 359
              if (!(eq_s_b("\u0BC7\u0BAE\u0BCD"))) {
                break lab45;
              }
              break lab36;
            }
            cursor = limit - v_11;
            lab46: {
              // literal, line 360
              if (!(eq_s_b("\u0BCB\u0BAE\u0BCD"))) {
                break lab46;
              }
              break lab36;
            }
            cursor = limit - v_11;
            lab47: {
              // literal, line 361
              if (!(eq_s_b("\u0B95\u0BC1\u0BAE\u0BCD"))) {
                break lab47;
              }
              break lab36;
            }
            cursor = limit - v_11;
            lab48: {
              // literal, line 362
              if (!(eq_s_b("\u0BA4\u0BC1\u0BAE\u0BCD"))) {
                break lab48;
              }
              break lab36;
            }
            cursor = limit - v_11;
            lab49: {
              // literal, line 363
              if (!(eq_s_b("\u0B9F\u0BC1\u0BAE\u0BCD"))) {
                break lab49;
              }
              break lab36;
            }
            cursor = limit - v_11;
            lab50: {
              // literal, line 364
              if (!(eq_s_b("\u0BB1\u0BC1\u0BAE\u0BCD"))) {
                break lab50;
              }
              break lab36;
            }
            cursor = limit - v_11;
            lab51: {
              // literal, line 365
              if (!(eq_s_b("\u0BBE\u0BAF\u0BCD"))) {
                break lab51;
              }
              break lab36;
            }
            cursor = limit - v_11;
            lab52: {
              // literal, line 366
              if (!(eq_s_b("\u0BA9\u0BC6\u0BA9\u0BCD"))) {
                break lab52;
              }
              break lab36;
            }
            cursor = limit - v_11;
            lab53: {
              // literal, line 367
              if (!(eq_s_b("\u0BA9\u0BBF\u0BB0\u0BCD"))) {
                break lab53;
              }
              break lab36;
            }
            cursor = limit - v_11;
            lab54: {
              // literal, line 368
              if (!(eq_s_b("\u0BC0\u0BB0\u0BCD"))) {
                break lab54;
              }
              break lab36;
            }
            cursor = limit - v_11;
            // literal, line 369
            if (!(eq_s_b("\u0BC0\u0BAF\u0BB0\u0BCD"))) {
              break lab35;
            }
          }
          // ], line 370
          bra = cursor;
          // <-, line 370
          slice_from("\u0BCD");
          // (, line 371
          // set found_a_match, line 371
          B_found_a_match = true;
          cursor = limit - v_10;
          break lab1;
        }
        cursor = limit - v_2;
        // test, line 374
        int v_14 = limit - cursor;
        // (, line 374
        // (, line 374
        // [, line 374
        ket = cursor;
        // or, line 374
        lab55: {
          int v_15 = limit - cursor;
          lab56: {
            // literal, line 374
            if (!(eq_s_b("\u0B95\u0BC1"))) {
              break lab56;
            }
            break lab55;
          }
          cursor = limit - v_15;
          // literal, line 374
          if (!(eq_s_b("\u0BA4\u0BC1"))) {
            break lab0;
          }
        }
        // (, line 374
        // test, line 374
        int v_16 = limit - cursor;
        // literal, line 374
        if (!(eq_s_b("\u0BCD"))) {
          break lab0;
        }
        cursor = limit - v_16;
        // ], line 374
        bra = cursor;
        // delete, line 374
        slice_del();
        // (, line 375
        // set found_a_match, line 375
        B_found_a_match = true;
        cursor = limit - v_14;
      }
    }
    cursor = limit - v_1;
    // do, line 378
    int v_17 = limit - cursor;
    lab57: {
      // (, line 378
      // [, line 378
      ket = cursor;
      // among, line 378
      if (find_among_b(a_25) == 0) {
        break lab57;
      }
      // ], line 385
      bra = cursor;
      // delete, line 385
      slice_del();
      // (, line 386
      // set found_a_match, line 386
      B_found_a_match = true;
    }
    cursor = limit - v_17;
    cursor = limit_backward;
    // do, line 389
    // call fix_endings, line 389
    r_fix_endings();
    return true;
  }

  public boolean stem() {
    // (, line 392
    // unset found_vetrumai_urupu, line 393
    B_found_vetrumai_urupu = false;
    // do, line 394
    int v_1 = cursor;
    // call fix_ending, line 394
    r_fix_ending();
    cursor = v_1;
    // call has_min_length, line 395
    if (!r_has_min_length()) {
      return false;
    }
    // do, line 396
    int v_2 = cursor;
    // call remove_question_prefixes, line 396
    r_remove_question_prefixes();
    cursor = v_2;
    // do, line 397
    int v_3 = cursor;
    // call remove_pronoun_prefixes, line 397
    r_remove_pronoun_prefixes();
    cursor = v_3;
    // do, line 398
    int v_4 = cursor;
    // call remove_question_suffixes, line 398
    r_remove_question_suffixes();
    cursor = v_4;
    // do, line 399
    int v_5 = cursor;
    // call remove_um, line 399
    r_remove_um();
    cursor = v_5;
    // do, line 400
    int v_6 = cursor;
    // call remove_common_word_endings, line 400
    r_remove_common_word_endings();
    cursor = v_6;
    // do, line 401
    int v_7 = cursor;
    // call remove_vetrumai_urupukal, line 401
    r_remove_vetrumai_urupukal();
    cursor = v_7;
    // do, line 402
    int v_8 = cursor;
    // call remove_plural_suffix, line 402
    r_remove_plural_suffix();
    cursor = v_8;
    // do, line 403
    int v_9 = cursor;
    // call remove_command_suffixes, line 403
    r_remove_command_suffixes();
    cursor = v_9;
    // do, line 404
    int v_10 = cursor;
    // call remove_tense_suffixes, line 404
    r_remove_tense_suffixes();
    cursor = v_10;
    return true;
  }

  @Override
  public boolean equals(Object o) {
    return o instanceof tamilStemmer;
  }

  @Override
  public int hashCode() {
    return tamilStemmer.class.getName().hashCode();
  }



}

