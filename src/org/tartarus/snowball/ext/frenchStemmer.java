// Generated by Snowball 2.0.0 - https://snowballstem.org/

package org.tartarus.snowball.ext;

import org.tartarus.snowball.Among;

/**
 * This class implements the stemming algorithm defined by a snowball script.
 * <p>
 * Generated by Snowball 2.0.0 - https://snowballstem.org/
 * </p>
 */
@SuppressWarnings("unused")
public class frenchStemmer extends org.tartarus.snowball.SnowballStemmer {

  private static final long serialVersionUID = 1L;

  private final static Among a_0[] =
      {new Among("col", -1, -1), new Among("par", -1, -1), new Among("tap", -1, -1)};

  private final static Among a_1[] =
      {new Among("", -1, 7), new Among("H", 0, 6), new Among("He", 1, 4), new Among("Hi", 1, 5),
          new Among("I", 0, 1), new Among("U", 0, 2), new Among("Y", 0, 3)};

  private final static Among a_2[] =
      {new Among("iqU", -1, 3), new Among("abl", -1, 3), new Among("I\u00E8r", -1, 4),
          new Among("i\u00E8r", -1, 4), new Among("eus", -1, 2), new Among("iv", -1, 1)};

  private final static Among a_3[] =
      {new Among("ic", -1, 2), new Among("abil", -1, 1), new Among("iv", -1, 3)};

  private final static Among a_4[] = {new Among("iqUe", -1, 1), new Among("atrice", -1, 2),
      new Among("ance", -1, 1), new Among("ence", -1, 5), new Among("logie", -1, 3),
      new Among("able", -1, 1), new Among("isme", -1, 1), new Among("euse", -1, 11),
      new Among("iste", -1, 1), new Among("ive", -1, 8), new Among("if", -1, 8),
      new Among("usion", -1, 4), new Among("ation", -1, 2), new Among("ution", -1, 4),
      new Among("ateur", -1, 2), new Among("iqUes", -1, 1), new Among("atrices", -1, 2),
      new Among("ances", -1, 1), new Among("ences", -1, 5), new Among("logies", -1, 3),
      new Among("ables", -1, 1), new Among("ismes", -1, 1), new Among("euses", -1, 11),
      new Among("istes", -1, 1), new Among("ives", -1, 8), new Among("ifs", -1, 8),
      new Among("usions", -1, 4), new Among("ations", -1, 2), new Among("utions", -1, 4),
      new Among("ateurs", -1, 2), new Among("ments", -1, 15), new Among("ements", 30, 6),
      new Among("issements", 31, 12), new Among("it\u00E9s", -1, 7), new Among("ment", -1, 15),
      new Among("ement", 34, 6), new Among("issement", 35, 12), new Among("amment", 34, 13),
      new Among("emment", 34, 14), new Among("aux", -1, 10), new Among("eaux", 39, 9),
      new Among("eux", -1, 1), new Among("it\u00E9", -1, 7)};

  private final static Among a_5[] = {new Among("ira", -1, 1), new Among("ie", -1, 1),
      new Among("isse", -1, 1), new Among("issante", -1, 1), new Among("i", -1, 1),
      new Among("irai", 4, 1), new Among("ir", -1, 1), new Among("iras", -1, 1),
      new Among("ies", -1, 1), new Among("\u00EEmes", -1, 1), new Among("isses", -1, 1),
      new Among("issantes", -1, 1), new Among("\u00EEtes", -1, 1), new Among("is", -1, 1),
      new Among("irais", 13, 1), new Among("issais", 13, 1), new Among("irions", -1, 1),
      new Among("issions", -1, 1), new Among("irons", -1, 1), new Among("issons", -1, 1),
      new Among("issants", -1, 1), new Among("it", -1, 1), new Among("irait", 21, 1),
      new Among("issait", 21, 1), new Among("issant", -1, 1), new Among("iraIent", -1, 1),
      new Among("issaIent", -1, 1), new Among("irent", -1, 1), new Among("issent", -1, 1),
      new Among("iront", -1, 1), new Among("\u00EEt", -1, 1), new Among("iriez", -1, 1),
      new Among("issiez", -1, 1), new Among("irez", -1, 1), new Among("issez", -1, 1)};

  private final static Among a_6[] = {new Among("a", -1, 3), new Among("era", 0, 2),
      new Among("asse", -1, 3), new Among("ante", -1, 3), new Among("\u00E9e", -1, 2),
      new Among("ai", -1, 3), new Among("erai", 5, 2), new Among("er", -1, 2),
      new Among("as", -1, 3), new Among("eras", 8, 2), new Among("\u00E2mes", -1, 3),
      new Among("asses", -1, 3), new Among("antes", -1, 3), new Among("\u00E2tes", -1, 3),
      new Among("\u00E9es", -1, 2), new Among("ais", -1, 3), new Among("erais", 15, 2),
      new Among("ions", -1, 1), new Among("erions", 17, 2), new Among("assions", 17, 3),
      new Among("erons", -1, 2), new Among("ants", -1, 3), new Among("\u00E9s", -1, 2),
      new Among("ait", -1, 3), new Among("erait", 23, 2), new Among("ant", -1, 3),
      new Among("aIent", -1, 3), new Among("eraIent", 26, 2), new Among("\u00E8rent", -1, 2),
      new Among("assent", -1, 3), new Among("eront", -1, 2), new Among("\u00E2t", -1, 3),
      new Among("ez", -1, 2), new Among("iez", 32, 2), new Among("eriez", 33, 2),
      new Among("assiez", 33, 3), new Among("erez", 32, 2), new Among("\u00E9", -1, 2)};

  private final static Among a_7[] =
      {new Among("e", -1, 3), new Among("I\u00E8re", 0, 2), new Among("i\u00E8re", 0, 2),
          new Among("ion", -1, 1), new Among("Ier", -1, 2), new Among("ier", -1, 2)};

  private final static Among a_8[] = {new Among("ell", -1, -1), new Among("eill", -1, -1),
      new Among("enn", -1, -1), new Among("onn", -1, -1), new Among("ett", -1, -1)};

  private static final char g_v[] =
      {17, 65, 16, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 130, 103, 8, 5};

  private static final char g_keep_with_s[] =
      {1, 65, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128};

  private int I_p2;
  private int I_p1;
  private int I_pV;


  private boolean r_prelude() {
    // repeat, line 38
    while (true) {
      int v_1 = cursor;
      lab0: {
        // goto, line 38
        golab1: while (true) {
          int v_2 = cursor;
          lab2: {
            // (, line 38
            // or, line 44
            lab3: {
              int v_3 = cursor;
              lab4: {
                // (, line 40
                if (!(in_grouping(g_v, 97, 251))) {
                  break lab4;
                }
                // [, line 40
                bra = cursor;
                // or, line 40
                lab5: {
                  int v_4 = cursor;
                  lab6: {
                    // (, line 40
                    // literal, line 40
                    if (!(eq_s("u"))) {
                      break lab6;
                    }
                    // ], line 40
                    ket = cursor;
                    if (!(in_grouping(g_v, 97, 251))) {
                      break lab6;
                    }
                    // <-, line 40
                    slice_from("U");
                    break lab5;
                  }
                  cursor = v_4;
                  lab7: {
                    // (, line 41
                    // literal, line 41
                    if (!(eq_s("i"))) {
                      break lab7;
                    }
                    // ], line 41
                    ket = cursor;
                    if (!(in_grouping(g_v, 97, 251))) {
                      break lab7;
                    }
                    // <-, line 41
                    slice_from("I");
                    break lab5;
                  }
                  cursor = v_4;
                  // (, line 42
                  // literal, line 42
                  if (!(eq_s("y"))) {
                    break lab4;
                  }
                  // ], line 42
                  ket = cursor;
                  // <-, line 42
                  slice_from("Y");
                }
                break lab3;
              }
              cursor = v_3;
              lab8: {
                // (, line 45
                // [, line 45
                bra = cursor;
                // literal, line 45
                if (!(eq_s("\u00EB"))) {
                  break lab8;
                }
                // ], line 45
                ket = cursor;
                // <-, line 45
                slice_from("He");
                break lab3;
              }
              cursor = v_3;
              lab9: {
                // (, line 47
                // [, line 47
                bra = cursor;
                // literal, line 47
                if (!(eq_s("\u00EF"))) {
                  break lab9;
                }
                // ], line 47
                ket = cursor;
                // <-, line 47
                slice_from("Hi");
                break lab3;
              }
              cursor = v_3;
              lab10: {
                // (, line 49
                // [, line 49
                bra = cursor;
                // literal, line 49
                if (!(eq_s("y"))) {
                  break lab10;
                }
                // ], line 49
                ket = cursor;
                if (!(in_grouping(g_v, 97, 251))) {
                  break lab10;
                }
                // <-, line 49
                slice_from("Y");
                break lab3;
              }
              cursor = v_3;
              // (, line 51
              // literal, line 51
              if (!(eq_s("q"))) {
                break lab2;
              }
              // [, line 51
              bra = cursor;
              // literal, line 51
              if (!(eq_s("u"))) {
                break lab2;
              }
              // ], line 51
              ket = cursor;
              // <-, line 51
              slice_from("U");
            }
            cursor = v_2;
            break golab1;
          }
          cursor = v_2;
          if (cursor >= limit) {
            break lab0;
          }
          cursor++;
        }
        continue;
      }
      cursor = v_1;
      break;
    }
    return true;
  }

  private boolean r_mark_regions() {
    // (, line 54
    I_pV = limit;
    I_p1 = limit;
    I_p2 = limit;
    // do, line 60
    int v_1 = cursor;
    lab0: {
      // (, line 60
      // or, line 62
      lab1: {
        int v_2 = cursor;
        lab2: {
          // (, line 61
          if (!(in_grouping(g_v, 97, 251))) {
            break lab2;
          }
          if (!(in_grouping(g_v, 97, 251))) {
            break lab2;
          }
          // next, line 61
          if (cursor >= limit) {
            break lab2;
          }
          cursor++;
          break lab1;
        }
        cursor = v_2;
        lab3: {
          // among, line 63
          if (find_among(a_0) == 0) {
            break lab3;
          }
          break lab1;
        }
        cursor = v_2;
        // (, line 70
        // next, line 70
        if (cursor >= limit) {
          break lab0;
        }
        cursor++;
        // gopast, line 70
        golab4: while (true) {
          lab5: {
            if (!(in_grouping(g_v, 97, 251))) {
              break lab5;
            }
            break golab4;
          }
          if (cursor >= limit) {
            break lab0;
          }
          cursor++;
        }
      }
      // setmark pV, line 71
      I_pV = cursor;
    }
    cursor = v_1;
    // do, line 73
    int v_4 = cursor;
    lab6: {
      // (, line 73
      // gopast, line 74
      golab7: while (true) {
        lab8: {
          if (!(in_grouping(g_v, 97, 251))) {
            break lab8;
          }
          break golab7;
        }
        if (cursor >= limit) {
          break lab6;
        }
        cursor++;
      }
      // gopast, line 74
      golab9: while (true) {
        lab10: {
          if (!(out_grouping(g_v, 97, 251))) {
            break lab10;
          }
          break golab9;
        }
        if (cursor >= limit) {
          break lab6;
        }
        cursor++;
      }
      // setmark p1, line 74
      I_p1 = cursor;
      // gopast, line 75
      golab11: while (true) {
        lab12: {
          if (!(in_grouping(g_v, 97, 251))) {
            break lab12;
          }
          break golab11;
        }
        if (cursor >= limit) {
          break lab6;
        }
        cursor++;
      }
      // gopast, line 75
      golab13: while (true) {
        lab14: {
          if (!(out_grouping(g_v, 97, 251))) {
            break lab14;
          }
          break golab13;
        }
        if (cursor >= limit) {
          break lab6;
        }
        cursor++;
      }
      // setmark p2, line 75
      I_p2 = cursor;
    }
    cursor = v_4;
    return true;
  }

  private boolean r_postlude() {
    int among_var;
    // repeat, line 79
    while (true) {
      int v_1 = cursor;
      lab0: {
        // (, line 79
        // [, line 81
        bra = cursor;
        // substring, line 81
        among_var = find_among(a_1);
        if (among_var == 0) {
          break lab0;
        }
        // ], line 81
        ket = cursor;
        switch (among_var) {
          case 1:
            // (, line 82
            // <-, line 82
            slice_from("i");
            break;
          case 2:
            // (, line 83
            // <-, line 83
            slice_from("u");
            break;
          case 3:
            // (, line 84
            // <-, line 84
            slice_from("y");
            break;
          case 4:
            // (, line 85
            // <-, line 85
            slice_from("\u00EB");
            break;
          case 5:
            // (, line 86
            // <-, line 86
            slice_from("\u00EF");
            break;
          case 6:
            // (, line 87
            // delete, line 87
            slice_del();
            break;
          case 7:
            // (, line 88
            // next, line 88
            if (cursor >= limit) {
              break lab0;
            }
            cursor++;
            break;
        }
        continue;
      }
      cursor = v_1;
      break;
    }
    return true;
  }

  private boolean r_RV() {
    if (!(I_pV <= cursor)) {
      return false;
    }
    return true;
  }

  private boolean r_R1() {
    if (!(I_p1 <= cursor)) {
      return false;
    }
    return true;
  }

  private boolean r_R2() {
    if (!(I_p2 <= cursor)) {
      return false;
    }
    return true;
  }

  private boolean r_standard_suffix() {
    int among_var;
    // (, line 98
    // [, line 99
    ket = cursor;
    // substring, line 99
    among_var = find_among_b(a_4);
    if (among_var == 0) {
      return false;
    }
    // ], line 99
    bra = cursor;
    switch (among_var) {
      case 1:
        // (, line 103
        // call R2, line 103
        if (!r_R2()) {
          return false;
        }
        // delete, line 103
        slice_del();
        break;
      case 2:
        // (, line 106
        // call R2, line 106
        if (!r_R2()) {
          return false;
        }
        // delete, line 106
        slice_del();
        // try, line 107
        int v_1 = limit - cursor;
        lab0: {
          // (, line 107
          // [, line 107
          ket = cursor;
          // literal, line 107
          if (!(eq_s_b("ic"))) {
            cursor = limit - v_1;
            break lab0;
          }
          // ], line 107
          bra = cursor;
          // or, line 107
          lab1: {
            int v_2 = limit - cursor;
            lab2: {
              // (, line 107
              // call R2, line 107
              if (!r_R2()) {
                break lab2;
              }
              // delete, line 107
              slice_del();
              break lab1;
            }
            cursor = limit - v_2;
            // <-, line 107
            slice_from("iqU");
          }
        }
        break;
      case 3:
        // (, line 111
        // call R2, line 111
        if (!r_R2()) {
          return false;
        }
        // <-, line 111
        slice_from("log");
        break;
      case 4:
        // (, line 114
        // call R2, line 114
        if (!r_R2()) {
          return false;
        }
        // <-, line 114
        slice_from("u");
        break;
      case 5:
        // (, line 117
        // call R2, line 117
        if (!r_R2()) {
          return false;
        }
        // <-, line 117
        slice_from("ent");
        break;
      case 6:
        // (, line 120
        // call RV, line 121
        if (!r_RV()) {
          return false;
        }
        // delete, line 121
        slice_del();
        // try, line 122
        int v_3 = limit - cursor;
        lab3: {
          // (, line 122
          // [, line 123
          ket = cursor;
          // substring, line 123
          among_var = find_among_b(a_2);
          if (among_var == 0) {
            cursor = limit - v_3;
            break lab3;
          }
          // ], line 123
          bra = cursor;
          switch (among_var) {
            case 1:
              // (, line 124
              // call R2, line 124
              if (!r_R2()) {
                cursor = limit - v_3;
                break lab3;
              }
              // delete, line 124
              slice_del();
              // [, line 124
              ket = cursor;
              // literal, line 124
              if (!(eq_s_b("at"))) {
                cursor = limit - v_3;
                break lab3;
              }
              // ], line 124
              bra = cursor;
              // call R2, line 124
              if (!r_R2()) {
                cursor = limit - v_3;
                break lab3;
              }
              // delete, line 124
              slice_del();
              break;
            case 2:
              // (, line 125
              // or, line 125
              lab4: {
                int v_4 = limit - cursor;
                lab5: {
                  // (, line 125
                  // call R2, line 125
                  if (!r_R2()) {
                    break lab5;
                  }
                  // delete, line 125
                  slice_del();
                  break lab4;
                }
                cursor = limit - v_4;
                // (, line 125
                // call R1, line 125
                if (!r_R1()) {
                  cursor = limit - v_3;
                  break lab3;
                }
                // <-, line 125
                slice_from("eux");
              }
              break;
            case 3:
              // (, line 127
              // call R2, line 127
              if (!r_R2()) {
                cursor = limit - v_3;
                break lab3;
              }
              // delete, line 127
              slice_del();
              break;
            case 4:
              // (, line 129
              // call RV, line 129
              if (!r_RV()) {
                cursor = limit - v_3;
                break lab3;
              }
              // <-, line 129
              slice_from("i");
              break;
          }
        }
        break;
      case 7:
        // (, line 135
        // call R2, line 136
        if (!r_R2()) {
          return false;
        }
        // delete, line 136
        slice_del();
        // try, line 137
        int v_5 = limit - cursor;
        lab6: {
          // (, line 137
          // [, line 138
          ket = cursor;
          // substring, line 138
          among_var = find_among_b(a_3);
          if (among_var == 0) {
            cursor = limit - v_5;
            break lab6;
          }
          // ], line 138
          bra = cursor;
          switch (among_var) {
            case 1:
              // (, line 139
              // or, line 139
              lab7: {
                int v_6 = limit - cursor;
                lab8: {
                  // (, line 139
                  // call R2, line 139
                  if (!r_R2()) {
                    break lab8;
                  }
                  // delete, line 139
                  slice_del();
                  break lab7;
                }
                cursor = limit - v_6;
                // <-, line 139
                slice_from("abl");
              }
              break;
            case 2:
              // (, line 140
              // or, line 140
              lab9: {
                int v_7 = limit - cursor;
                lab10: {
                  // (, line 140
                  // call R2, line 140
                  if (!r_R2()) {
                    break lab10;
                  }
                  // delete, line 140
                  slice_del();
                  break lab9;
                }
                cursor = limit - v_7;
                // <-, line 140
                slice_from("iqU");
              }
              break;
            case 3:
              // (, line 141
              // call R2, line 141
              if (!r_R2()) {
                cursor = limit - v_5;
                break lab6;
              }
              // delete, line 141
              slice_del();
              break;
          }
        }
        break;
      case 8:
        // (, line 147
        // call R2, line 148
        if (!r_R2()) {
          return false;
        }
        // delete, line 148
        slice_del();
        // try, line 149
        int v_8 = limit - cursor;
        lab11: {
          // (, line 149
          // [, line 149
          ket = cursor;
          // literal, line 149
          if (!(eq_s_b("at"))) {
            cursor = limit - v_8;
            break lab11;
          }
          // ], line 149
          bra = cursor;
          // call R2, line 149
          if (!r_R2()) {
            cursor = limit - v_8;
            break lab11;
          }
          // delete, line 149
          slice_del();
          // [, line 149
          ket = cursor;
          // literal, line 149
          if (!(eq_s_b("ic"))) {
            cursor = limit - v_8;
            break lab11;
          }
          // ], line 149
          bra = cursor;
          // or, line 149
          lab12: {
            int v_9 = limit - cursor;
            lab13: {
              // (, line 149
              // call R2, line 149
              if (!r_R2()) {
                break lab13;
              }
              // delete, line 149
              slice_del();
              break lab12;
            }
            cursor = limit - v_9;
            // <-, line 149
            slice_from("iqU");
          }
        }
        break;
      case 9:
        // (, line 151
        // <-, line 151
        slice_from("eau");
        break;
      case 10:
        // (, line 152
        // call R1, line 152
        if (!r_R1()) {
          return false;
        }
        // <-, line 152
        slice_from("al");
        break;
      case 11:
        // (, line 154
        // or, line 154
        lab14: {
          int v_10 = limit - cursor;
          lab15: {
            // (, line 154
            // call R2, line 154
            if (!r_R2()) {
              break lab15;
            }
            // delete, line 154
            slice_del();
            break lab14;
          }
          cursor = limit - v_10;
          // (, line 154
          // call R1, line 154
          if (!r_R1()) {
            return false;
          }
          // <-, line 154
          slice_from("eux");
        }
        break;
      case 12:
        // (, line 157
        // call R1, line 157
        if (!r_R1()) {
          return false;
        }
        if (!(out_grouping_b(g_v, 97, 251))) {
          return false;
        }
        // delete, line 157
        slice_del();
        break;
      case 13:
        // (, line 162
        // call RV, line 162
        if (!r_RV()) {
          return false;
        }
        // fail, line 162
        // (, line 162
        // <-, line 162
        slice_from("ant");
        return false;
      case 14:
        // (, line 163
        // call RV, line 163
        if (!r_RV()) {
          return false;
        }
        // fail, line 163
        // (, line 163
        // <-, line 163
        slice_from("ent");
        return false;
      case 15:
        // (, line 165
        // test, line 165
        int v_11 = limit - cursor;
        // (, line 165
        if (!(in_grouping_b(g_v, 97, 251))) {
          return false;
        }
        // call RV, line 165
        if (!r_RV()) {
          return false;
        }
        cursor = limit - v_11;
        // fail, line 165
        // (, line 165
        // delete, line 165
        slice_del();
        return false;
    }
    return true;
  }

  private boolean r_i_verb_suffix() {
    // setlimit, line 170
    if (cursor < I_pV) {
      return false;
    }
    int v_2 = limit_backward;
    limit_backward = I_pV;
    // (, line 170
    // [, line 171
    ket = cursor;
    // substring, line 171
    if (find_among_b(a_5) == 0) {
      limit_backward = v_2;
      return false;
    }
    // ], line 171
    bra = cursor;
    // (, line 177
    // not, line 177
    {
      int v_3 = limit - cursor;
      lab0: {
        // literal, line 177
        if (!(eq_s_b("H"))) {
          break lab0;
        }
        limit_backward = v_2;
        return false;
      }
      cursor = limit - v_3;
    }
    if (!(out_grouping_b(g_v, 97, 251))) {
      limit_backward = v_2;
      return false;
    }
    // delete, line 177
    slice_del();
    limit_backward = v_2;
    return true;
  }

  private boolean r_verb_suffix() {
    int among_var;
    // setlimit, line 181
    if (cursor < I_pV) {
      return false;
    }
    int v_2 = limit_backward;
    limit_backward = I_pV;
    // (, line 181
    // [, line 182
    ket = cursor;
    // substring, line 182
    among_var = find_among_b(a_6);
    if (among_var == 0) {
      limit_backward = v_2;
      return false;
    }
    // ], line 182
    bra = cursor;
    switch (among_var) {
      case 1:
        // (, line 184
        // call R2, line 184
        if (!r_R2()) {
          limit_backward = v_2;
          return false;
        }
        // delete, line 184
        slice_del();
        break;
      case 2:
        // (, line 192
        // delete, line 192
        slice_del();
        break;
      case 3:
        // (, line 197
        // delete, line 197
        slice_del();
        // try, line 198
        int v_3 = limit - cursor;
        lab0: {
          // (, line 198
          // [, line 198
          ket = cursor;
          // literal, line 198
          if (!(eq_s_b("e"))) {
            cursor = limit - v_3;
            break lab0;
          }
          // ], line 198
          bra = cursor;
          // delete, line 198
          slice_del();
        }
        break;
    }
    limit_backward = v_2;
    return true;
  }

  private boolean r_residual_suffix() {
    int among_var;
    // (, line 205
    // try, line 206
    int v_1 = limit - cursor;
    lab0: {
      // (, line 206
      // [, line 206
      ket = cursor;
      // literal, line 206
      if (!(eq_s_b("s"))) {
        cursor = limit - v_1;
        break lab0;
      }
      // ], line 206
      bra = cursor;
      // test, line 206
      int v_2 = limit - cursor;
      // (, line 206
      // or, line 206
      lab1: {
        int v_3 = limit - cursor;
        lab2: {
          // literal, line 206
          if (!(eq_s_b("Hi"))) {
            break lab2;
          }
          break lab1;
        }
        cursor = limit - v_3;
        if (!(out_grouping_b(g_keep_with_s, 97, 232))) {
          cursor = limit - v_1;
          break lab0;
        }
      }
      cursor = limit - v_2;
      // delete, line 206
      slice_del();
    }
    // setlimit, line 207
    if (cursor < I_pV) {
      return false;
    }
    int v_5 = limit_backward;
    limit_backward = I_pV;
    // (, line 207
    // [, line 208
    ket = cursor;
    // substring, line 208
    among_var = find_among_b(a_7);
    if (among_var == 0) {
      limit_backward = v_5;
      return false;
    }
    // ], line 208
    bra = cursor;
    switch (among_var) {
      case 1:
        // (, line 209
        // call R2, line 209
        if (!r_R2()) {
          limit_backward = v_5;
          return false;
        }
        // or, line 209
        lab3: {
          int v_6 = limit - cursor;
          lab4: {
            // literal, line 209
            if (!(eq_s_b("s"))) {
              break lab4;
            }
            break lab3;
          }
          cursor = limit - v_6;
          // literal, line 209
          if (!(eq_s_b("t"))) {
            limit_backward = v_5;
            return false;
          }
        }
        // delete, line 209
        slice_del();
        break;
      case 2:
        // (, line 211
        // <-, line 211
        slice_from("i");
        break;
      case 3:
        // (, line 212
        // delete, line 212
        slice_del();
        break;
    }
    limit_backward = v_5;
    return true;
  }

  private boolean r_un_double() {
    // (, line 217
    // test, line 218
    int v_1 = limit - cursor;
    // among, line 218
    if (find_among_b(a_8) == 0) {
      return false;
    }
    cursor = limit - v_1;
    // [, line 218
    ket = cursor;
    // next, line 218
    if (cursor <= limit_backward) {
      return false;
    }
    cursor--;
    // ], line 218
    bra = cursor;
    // delete, line 218
    slice_del();
    return true;
  }

  private boolean r_un_accent() {
    // (, line 221
    // atleast, line 222
    {
      int v_1 = 1;
      while (true) {
        lab0: {
          if (!(out_grouping_b(g_v, 97, 251))) {
            break lab0;
          }
          v_1--;
          continue;
        }
        break;
      }
      if (v_1 > 0) {
        return false;
      }
    }
    // [, line 223
    ket = cursor;
    // or, line 223
    lab1: {
      int v_3 = limit - cursor;
      lab2: {
        // literal, line 223
        if (!(eq_s_b("\u00E9"))) {
          break lab2;
        }
        break lab1;
      }
      cursor = limit - v_3;
      // literal, line 223
      if (!(eq_s_b("\u00E8"))) {
        return false;
      }
    }
    // ], line 223
    bra = cursor;
    // <-, line 223
    slice_from("e");
    return true;
  }

  public boolean stem() {
    // (, line 227
    // do, line 229
    int v_1 = cursor;
    // call prelude, line 229
    r_prelude();
    cursor = v_1;
    // do, line 230
    // call mark_regions, line 230
    r_mark_regions();
    // backwards, line 231
    limit_backward = cursor;
    cursor = limit;
    // (, line 231
    // do, line 233
    int v_3 = limit - cursor;
    lab0: {
      // (, line 233
      // or, line 243
      lab1: {
        int v_4 = limit - cursor;
        lab2: {
          // (, line 234
          // and, line 239
          int v_5 = limit - cursor;
          // (, line 235
          // or, line 235
          lab3: {
            int v_6 = limit - cursor;
            lab4: {
              // call standard_suffix, line 235
              if (!r_standard_suffix()) {
                break lab4;
              }
              break lab3;
            }
            cursor = limit - v_6;
            lab5: {
              // call i_verb_suffix, line 236
              if (!r_i_verb_suffix()) {
                break lab5;
              }
              break lab3;
            }
            cursor = limit - v_6;
            // call verb_suffix, line 237
            if (!r_verb_suffix()) {
              break lab2;
            }
          }
          cursor = limit - v_5;
          // try, line 240
          int v_7 = limit - cursor;
          lab6: {
            // (, line 240
            // [, line 240
            ket = cursor;
            // or, line 240
            lab7: {
              int v_8 = limit - cursor;
              lab8: {
                // (, line 240
                // literal, line 240
                if (!(eq_s_b("Y"))) {
                  break lab8;
                }
                // ], line 240
                bra = cursor;
                // <-, line 240
                slice_from("i");
                break lab7;
              }
              cursor = limit - v_8;
              // (, line 241
              // literal, line 241
              if (!(eq_s_b("\u00E7"))) {
                cursor = limit - v_7;
                break lab6;
              }
              // ], line 241
              bra = cursor;
              // <-, line 241
              slice_from("c");
            }
          }
          break lab1;
        }
        cursor = limit - v_4;
        // call residual_suffix, line 244
        if (!r_residual_suffix()) {
          break lab0;
        }
      }
    }
    cursor = limit - v_3;
    // do, line 249
    int v_9 = limit - cursor;
    // call un_double, line 249
    r_un_double();
    cursor = limit - v_9;
    // do, line 250
    int v_10 = limit - cursor;
    // call un_accent, line 250
    r_un_accent();
    cursor = limit - v_10;
    cursor = limit_backward;
    // do, line 252
    int v_11 = cursor;
    // call postlude, line 252
    r_postlude();
    cursor = v_11;
    return true;
  }

  @Override
  public boolean equals(Object o) {
    return o instanceof frenchStemmer;
  }

  @Override
  public int hashCode() {
    return frenchStemmer.class.getName().hashCode();
  }



}

